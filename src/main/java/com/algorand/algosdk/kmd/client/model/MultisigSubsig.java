/*
 * KMD HTTP API
 * API for KMD (Key Management Daemon)
 *
 * OpenAPI spec version: 0.0.1
 * Contact: contact@algorand.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.algorand.algosdk.kmd.client.model;

import com.google.gson.annotations.SerializedName;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import org.apache.commons.lang3.ObjectUtils;

/**
 * MultisigSubsig is a struct that holds a pair of public key and signatures signatures may be empty
 */
@ApiModel(description = "MultisigSubsig is a struct that holds a pair of public key and signatures signatures may be empty")

public class MultisigSubsig {
  @SerializedName("Key")
  private PublicKey key = null;

  @SerializedName("Sig")
  private Signature sig = null;

  public MultisigSubsig key(PublicKey key) {
    this.key = key;
    return this;
  }

   /**
   * Get key
   * @return key
  **/
  @ApiModelProperty(value = "")
  public PublicKey getKey() {
    return key;
  }

  public void setKey(PublicKey key) {
    this.key = key;
  }

  public MultisigSubsig sig(Signature sig) {
    this.sig = sig;
    return this;
  }

   /**
   * Get sig
   * @return sig
  **/
  @ApiModelProperty(value = "")
  public Signature getSig() {
    return sig;
  }

  public void setSig(Signature sig) {
    this.sig = sig;
  }


  @Override
  public boolean equals(java.lang.Object o) {
  if (this == o) {
    return true;
  }
  if (o == null || getClass() != o.getClass()) {
    return false;
  }
    MultisigSubsig multisigSubsig = (MultisigSubsig) o;
    return ObjectUtils.equals(this.key, multisigSubsig.key) &&
    ObjectUtils.equals(this.sig, multisigSubsig.sig);
  }

  @Override
  public int hashCode() {
    return ObjectUtils.hashCodeMulti(key, sig);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MultisigSubsig {\n");
    
    sb.append("    key: ").append(toIndentedString(key)).append("\n");
    sb.append("    sig: ").append(toIndentedString(sig)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

