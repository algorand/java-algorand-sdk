## conversion function to map generated name from spec to hand written name
#macro ( paramName $param )##
#if( $param.propertyName == "tx-type" )
Type##
#elseif( $param.propertyName == "txn" )
Transaction##
#else
$str.kebabToUpperCamel($param.propertyName)##
#end
#end
## Converts a parameter type into the SDK specific type.
#macro ( toSdkType $param )##
#if ($param.arrayType && $param.arrayType != "")[]#end## Add array prefix to arrays...
#if ( $param.algorandFormat == "SignedTransaction" )
types.SignedTxn##
###elseif ( $param.algorandFormat == "Address" ) ## No special handling for Address in go SDK
##string##
#elseif ( $param.type == "object" )
*map[string]interface{}##
#elseif ( $param.type == "integer" || $param.arrayType == "integer" )
uint64##
#elseif ( $param.type == "boolean" )
bool##
#elseif( $param.type == "address" )
string##
#elseif( $param.type == "binary" )
[]byte##
#elseif($param.arrayType && $param.format == "byte")
[]byte##
#elseif( $param.type == "string" && $param.format == "byte" )
[]byte##
#elseif( $param.type == "string" || $param.arrayType == "string" )
string##
#elseif( $param.arrayType )
${param.arrayType}##
#elseif( $param.refType )## This is second because the old code avoids typedef of references
${param.refType}##
#else
UNHANDLED TYPE
- ref: $!param.refType
- type: $!param.type
- array type: $!param.arrayType
- algorand format: $!param.algorandFormat
- format: $!param.format
$unknown.type ## force a template failure with an unknown type
#end
#end
#set( $new = "
" )
package $propFile.model_package;

#set( $hasTypes = false )
#foreach( $type in $def.uniqueTypes )
#if( $type == "SignedTransaction" )
import "github.com/algorand/go-algorand-sdk/types"
#set( $hasTypes = true )
#end
#end
#if( $hasTypes )

#end
#if( $def.doc )
// $str.formatDoc("$def.name ${str.uncapitalize($def.doc)}", "// ")
#else
// $def.name defines a model for ${def.name}.
#end
type $def.name struct {
#foreach( $param in $def.properties )
#set( $formattedName = "#paramName()" )
  // $str.formatDoc("$formattedName ${str.uncapitalize($param.doc)}", "  // ")
  $formattedName #toSdkType($param) `json:"$param.propertyName#if( !$param.required ),omitempty#end"`
#if( $foreach.hasNext )$new#end
#end
}
