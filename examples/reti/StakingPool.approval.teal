#pragma version 10

// This TEAL was generated by TEALScript v0.96.0
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implemented in the contract, its respective branch will be "*NOT_IMPLEMENTED" which just contains "err"
txn ApplicationID
!
int 6
*
txn OnCompletion
+
switch *call_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *call_UpdateApplication *NOT_IMPLEMENTED *create_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED

*NOT_IMPLEMENTED:
	// The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?
	err

// updateApplication()void
*abi_route_updateApplication:
	// execute updateApplication()void
	callsub updateApplication
	int 1
	return

// updateApplication(): void
updateApplication:
	proto 0 0

	// contracts/stakingPool.algo.ts:92
	// assert(
	//             this.txn.sender === Address.fromAddress('LZ4V2IRVLCXFJK4REJV4TAGEKEYTA2GMR6TC2344OB3L3AF3MWXZ6ZAFIQ'),
	//             'Temporary: contract is upgradeable but only during testing and only from a development account',
	//         )
	txn Sender
	addr LZ4V2IRVLCXFJK4REJV4TAGEKEYTA2GMR6TC2344OB3L3AF3MWXZ6ZAFIQ
	==

	// Temporary: contract is upgradeable but only during testing and only from a development account
	assert
	retsub

// createApplication(uint64,uint64,uint64,uint64)void
*abi_route_createApplication:
	// minEntryStake: uint64
	txna ApplicationArgs 4
	btoi

	// poolId: uint64
	txna ApplicationArgs 3
	btoi

	// validatorId: uint64
	txna ApplicationArgs 2
	btoi

	// creatingContractId: uint64
	txna ApplicationArgs 1
	btoi

	// execute createApplication(uint64,uint64,uint64,uint64)void
	callsub createApplication
	int 1
	return

// createApplication(creatingContractId: AppID, validatorId: uint64, poolId: uint64, minEntryStake: uint64): void
//
// Initialize the staking pool w/ owner and manager, but can only be created by the validator contract.
// @param {uint64} creatingContractId - id of contract that constructed us - the validator application (single global instance)
// @param {uint64} validatorId - id of validator we're a staking pool of
// @param {uint64} poolId - which pool id are we
// @param {uint64} minEntryStake - minimum amount to be in pool, but also minimum amount balance can't go below (without removing all!)
createApplication:
	proto 4 0

	// *if0_condition
	// contracts/stakingPool.algo.ts:106
	// creatingContractId === AppID.fromUint64(0)
	frame_dig -1 // creatingContractId: AppID
	int 0
	==
	bz *if0_else

	// *if0_consequent
	// contracts/stakingPool.algo.ts:108
	// assert(validatorId === 0)
	frame_dig -2 // validatorId: uint64
	int 0
	==
	assert

	// contracts/stakingPool.algo.ts:109
	// assert(poolId === 0)
	frame_dig -3 // poolId: uint64
	int 0
	==
	assert
	b *if0_end

*if0_else:
	// contracts/stakingPool.algo.ts:111
	// assert(validatorId !== 0)
	frame_dig -2 // validatorId: uint64
	int 0
	!=
	assert

	// contracts/stakingPool.algo.ts:112
	// assert(poolId !== 0)
	frame_dig -3 // poolId: uint64
	int 0
	!=
	assert

*if0_end:
	// contracts/stakingPool.algo.ts:114
	// assert(minEntryStake >= MIN_ALGO_STAKE_PER_POOL, 'staking pool must have minimum entry of 1 algo')
	frame_dig -4 // minEntryStake: uint64
	int 1000000
	>=

	// staking pool must have minimum entry of 1 algo
	assert

	// contracts/stakingPool.algo.ts:115
	// this.creatingValidatorContractAppId.value = creatingContractId
	byte 0x63726561746f72417070 // "creatorApp"
	frame_dig -1 // creatingContractId: AppID
	app_global_put

	// contracts/stakingPool.algo.ts:116
	// this.validatorId.value = validatorId
	byte 0x76616c696461746f724964 // "validatorId"
	frame_dig -2 // validatorId: uint64
	app_global_put

	// contracts/stakingPool.algo.ts:117
	// this.poolId.value = poolId
	byte 0x706f6f6c4964 // "poolId"
	frame_dig -3 // poolId: uint64
	app_global_put

	// contracts/stakingPool.algo.ts:118
	// this.numStakers.value = 0
	byte 0x6e756d5374616b657273 // "numStakers"
	int 0
	app_global_put

	// contracts/stakingPool.algo.ts:119
	// this.totalAlgoStaked.value = 0
	byte 0x7374616b6564 // "staked"
	int 0
	app_global_put

	// contracts/stakingPool.algo.ts:120
	// this.minEntryStake.value = minEntryStake
	byte 0x6d696e456e7472795374616b65 // "minEntryStake"
	frame_dig -4 // minEntryStake: uint64
	app_global_put

	// contracts/stakingPool.algo.ts:121
	// this.lastPayout.value = globals.round
	byte 0x6c6173745061796f7574 // "lastPayout"
	global Round
	app_global_put

	// contracts/stakingPool.algo.ts:122
	// this.epochNumber.value = 0
	byte 0x65706f63684e756d626572 // "epochNumber"
	int 0
	app_global_put

	// contracts/stakingPool.algo.ts:124
	// this.setRoundsPerDay()
	callsub setRoundsPerDay

	// contracts/stakingPool.algo.ts:125
	// this.binRoundStart.value = globals.round - (globals.round % this.roundsPerDay.value)
	byte 0x62696e526f756e645374617274 // "binRoundStart"
	global Round
	global Round
	byte 0x726f756e6473506572446179 // "roundsPerDay"
	app_global_get
	%
	-
	app_global_put

	// contracts/stakingPool.algo.ts:126
	// this.stakeAccumulator.value = 0 as uint128
	byte 0x7374616b65416363756d756c61746f72 // "stakeAccumulator"
	byte 0x00000000000000000000000000000000
	app_global_put

	// contracts/stakingPool.algo.ts:127
	// this.rewardAccumulator.value = 0
	byte 0x726577617264416363756d756c61746f72 // "rewardAccumulator"
	int 0
	app_global_put

	// contracts/stakingPool.algo.ts:128
	// this.weightedMovingAverage.value = 0 as uint128
	byte 0x65776d61 // "ewma"
	byte 0x00000000000000000000000000000000
	app_global_put
	retsub

// gas()void
*abi_route_gas:
	// execute gas()void
	callsub gas
	int 1
	return

// gas(): void
//
// gas is a dummy no-op call that can be used to pool-up resource references and opcode cost
gas:
	proto 0 0
	retsub

// costForBoxStorage(totalNumBytes: uint64): uint64
costForBoxStorage:
	proto 1 1

	// contracts/stakingPool.algo.ts:140
	// return SCBOX_PERBOX + totalNumBytes * SCBOX_PERBYTE
	int 2500
	frame_dig -1 // totalNumBytes: uint64
	int 400
	*
	+
	retsub

// initStorage(pay)void
*abi_route_initStorage:
	// mbrPayment: pay
	txn GroupIndex
	int 1
	-
	dup
	gtxns TypeEnum
	int pay
	==

	// argument 0 (mbrPayment) for initStorage must be a pay transaction
	assert

	// execute initStorage(pay)void
	callsub initStorage
	int 1
	return

// initStorage(mbrPayment: PayTxn): void
//
// Called after we're created and then funded, so we can create our large stakers ledger storage
// Caller has to get MBR amounts from ValidatorRegistry to know how much to fund us to cover the box storage cost
// If this is pool 1 AND the validator has specified a reward token, opt-in to that token
// so that the validator can seed the pool with future rewards of that token.
// @param mbrPayment payment from caller which covers mbr increase of new staking pools' storage
initStorage:
	proto 1 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x
	dupn 3

	// contracts/stakingPool.algo.ts:151
	// assert(!this.stakers.exists, 'staking pool already initialized')
	byte 0x7374616b657273 // "stakers"
	box_len
	swap
	pop
	!

	// staking pool already initialized
	assert

	// contracts/stakingPool.algo.ts:154
	// validatorConfig = sendMethodCall<typeof ValidatorRegistry.prototype.getValidatorConfig>({
	//             applicationID: this.creatingValidatorContractAppId.value,
	//             methodArgs: [this.validatorId.value],
	//         })
	itxn_begin
	int appl
	itxn_field TypeEnum
	method "getValidatorConfig(uint64)(uint64,address,address,uint64,uint8,address,uint64[4],uint64,uint64,uint64,uint32,uint32,address,uint64,uint64,uint8,uint64,uint64)"
	itxn_field ApplicationArgs

	// contracts/stakingPool.algo.ts:155
	// applicationID: this.creatingValidatorContractAppId.value
	byte 0x63726561746f72417070 // "creatorApp"
	app_global_get
	itxn_field ApplicationID

	// contracts/stakingPool.algo.ts:156
	// methodArgs: [this.validatorId.value]
	byte 0x76616c696461746f724964 // "validatorId"
	app_global_get
	itob
	itxn_field ApplicationArgs

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	itxn NumLogs
	int 1
	-
	itxnas Logs
	extract 4 0
	frame_bury 0 // validatorConfig: (uint64,address,address,uint64,uint8,address,uint64[4],uint64,uint64,uint64,uint32,uint32,address,uint64,uint64,uint8,uint64,uint64)

	// contracts/stakingPool.algo.ts:158
	// isTokenEligible = validatorConfig.rewardTokenId !== 0
	frame_dig 0 // validatorConfig: (uint64,address,address,uint64,uint8,address,uint64[4],uint64,uint64,uint64,uint32,uint32,address,uint64,uint64,uint8,uint64,uint64)
	extract 153 8
	btoi
	int 0
	!=
	frame_bury 1 // isTokenEligible: bool

	// contracts/stakingPool.algo.ts:159
	// extraMBR = isTokenEligible && this.poolId.value === 1 ? ASSET_HOLDING_FEE : 0
	frame_dig 1 // isTokenEligible: bool
	dup
	bz *skip_and0
	byte 0x706f6f6c4964 // "poolId"
	app_global_get
	int 1
	==
	&&

*skip_and0:
	bz *ternary0_false
	int 100000
	b *ternary0_end

*ternary0_false:
	int 0

*ternary0_end:
	frame_bury 2 // extraMBR: uint64

	// contracts/stakingPool.algo.ts:160
	// PoolInitMbr =
	//             ALGORAND_ACCOUNT_MIN_BALANCE +
	//             extraMBR +
	//             this.costForBoxStorage(7 /* 'stakers' name */ + len<StakedInfo>() * MAX_STAKERS_PER_POOL)
	int 100000
	frame_dig 2 // extraMBR: uint64
	+
	int 12807
	callsub costForBoxStorage
	+
	frame_bury 3 // PoolInitMbr: uint64

	// contracts/stakingPool.algo.ts:166
	// verifyPayTxn(mbrPayment, { receiver: this.app.address, amount: PoolInitMbr })
	// verify receiver
	frame_dig -1 // mbrPayment: PayTxn
	gtxns Receiver
	global CurrentApplicationAddress
	==

	// transaction verification failed: {"txn":"mbrPayment","field":"receiver","expected":"this.app.address"}
	assert

	// verify amount
	frame_dig -1 // mbrPayment: PayTxn
	gtxns Amount
	frame_dig 3 // PoolInitMbr: uint64
	==

	// transaction verification failed: {"txn":"mbrPayment","field":"amount","expected":"PoolInitMbr"}
	assert

	// contracts/stakingPool.algo.ts:167
	// this.stakers.create()
	byte 0x7374616b657273 // "stakers"
	int 12800
	box_create
	pop

	// *if1_condition
	// contracts/stakingPool.algo.ts:169
	// isTokenEligible && this.poolId.value === 1
	frame_dig 1 // isTokenEligible: bool
	dup
	bz *skip_and1
	byte 0x706f6f6c4964 // "poolId"
	app_global_get
	int 1
	==
	&&

*skip_and1:
	bz *if1_end

	// *if1_consequent
	// contracts/stakingPool.algo.ts:171
	// sendAssetTransfer({
	//                 xferAsset: AssetID.fromUint64(validatorConfig.rewardTokenId),
	//                 assetReceiver: this.app.address,
	//                 assetAmount: 0,
	//             })
	itxn_begin
	int axfer
	itxn_field TypeEnum

	// contracts/stakingPool.algo.ts:172
	// xferAsset: AssetID.fromUint64(validatorConfig.rewardTokenId)
	frame_dig 0 // validatorConfig: (uint64,address,address,uint64,uint8,address,uint64[4],uint64,uint64,uint64,uint32,uint32,address,uint64,uint64,uint8,uint64,uint64)
	extract 153 8
	btoi
	itxn_field XferAsset

	// contracts/stakingPool.algo.ts:173
	// assetReceiver: this.app.address
	global CurrentApplicationAddress
	itxn_field AssetReceiver

	// contracts/stakingPool.algo.ts:174
	// assetAmount: 0
	int 0
	itxn_field AssetAmount

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

*if1_end:
	retsub

// addStake(pay,address)uint64
*abi_route_addStake:
	// The ABI return prefix
	byte 0x151f7c75

	// staker: address
	txna ApplicationArgs 1
	dup
	len
	int 32
	==

	// argument 0 (staker) for addStake must be a address
	assert

	// stakedAmountPayment: pay
	txn GroupIndex
	int 1
	-
	dup
	gtxns TypeEnum
	int pay
	==

	// argument 1 (stakedAmountPayment) for addStake must be a pay transaction
	assert

	// execute addStake(pay,address)uint64
	callsub addStake
	itob
	concat
	log
	int 1
	return

// addStake(stakedAmountPayment: PayTxn, staker: Address): uint64
//
// Adds stake to the given account.
// Can ONLY be called by the validator contract that created us
// Must receive payment from the validator contract for amount being staked.
//
// @param {PayTxn} stakedAmountPayment prior payment coming from validator contract to us on behalf of staker.
// @param {Address} staker - The account adding new stake
// @throws {Error} - Throws an error if the staking pool is full.
// @returns {uint64} new 'entry round' round number of stake add
addStake:
	proto 2 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x
	dupn 4

	// contracts/stakingPool.algo.ts:190
	// assert(this.stakers.exists, 'staking pool must be initialized first')
	byte 0x7374616b657273 // "stakers"
	box_len
	swap
	pop

	// staking pool must be initialized first
	assert

	// contracts/stakingPool.algo.ts:193
	// assert(
	//             this.txn.sender === this.creatingValidatorContractAppId.value.address,
	//             'stake can only be added via the validator contract',
	//         )
	txn Sender
	byte 0x63726561746f72417070 // "creatorApp"
	app_global_get
	app_params_get AppAddress
	pop
	==

	// stake can only be added via the validator contract
	assert

	// contracts/stakingPool.algo.ts:197
	// assert(staker !== globals.zeroAddress)
	frame_dig -2 // staker: Address
	global ZeroAddress
	!=
	assert

	// contracts/stakingPool.algo.ts:200
	// this.checkIfBinClosed()
	callsub checkIfBinClosed

	// contracts/stakingPool.algo.ts:204
	// verifyPayTxn(stakedAmountPayment, {
	//             sender: this.creatingValidatorContractAppId.value.address,
	//             receiver: this.app.address,
	//             amount: stakedAmountPayment.amount,
	//         })
	// verify sender
	frame_dig -1 // stakedAmountPayment: PayTxn
	gtxns Sender
	byte 0x63726561746f72417070 // "creatorApp"
	app_global_get
	app_params_get AppAddress
	pop
	==

	// transaction verification failed: {"txn":"stakedAmountPayment","field":"sender","expected":"this.creatingValidatorContractAppId.value.address"}
	assert

	// verify receiver
	frame_dig -1 // stakedAmountPayment: PayTxn
	gtxns Receiver
	global CurrentApplicationAddress
	==

	// transaction verification failed: {"txn":"stakedAmountPayment","field":"receiver","expected":"this.app.address"}
	assert

	// verify amount
	frame_dig -1 // stakedAmountPayment: PayTxn
	gtxns Amount
	frame_dig -1 // stakedAmountPayment: PayTxn
	gtxns Amount
	==

	// transaction verification failed: {"txn":"stakedAmountPayment","field":"amount","expected":"stakedAmountPayment.amount"}
	assert

	// contracts/stakingPool.algo.ts:213
	// entryRound = globals.round + ALGORAND_STAKING_BLOCK_DELAY
	global Round
	int 320
	+
	frame_bury 0 // entryRound: uint64

	// contracts/stakingPool.algo.ts:214
	// firstEmpty = 0
	int 0
	frame_bury 1 // firstEmpty: uint64

	// contracts/stakingPool.algo.ts:216
	// this.totalAlgoStaked.value += stakedAmountPayment.amount
	byte 0x7374616b6564 // "staked"
	app_global_get
	frame_dig -1 // stakedAmountPayment: PayTxn
	gtxns Amount
	+
	byte 0x7374616b6564 // "staked"
	swap
	app_global_put

	// contracts/stakingPool.algo.ts:218
	// roundsLeftInBin = this.binRoundStart.value + this.roundsPerDay.value - globals.round
	byte 0x62696e526f756e645374617274 // "binRoundStart"
	app_global_get
	byte 0x726f756e6473506572446179 // "roundsPerDay"
	app_global_get
	+
	global Round
	-
	frame_bury 2 // roundsLeftInBin: uint64

	// contracts/stakingPool.algo.ts:219
	// this.stakeAccumulator.value =
	//             this.stakeAccumulator.value + (stakedAmountPayment.amount as uint128) * (roundsLeftInBin as uint128)
	byte 0x7374616b65416363756d756c61746f72 // "stakeAccumulator"
	dup
	app_global_get
	frame_dig -1 // stakedAmountPayment: PayTxn
	gtxns Amount
	itob
	frame_dig 2 // roundsLeftInBin: uint64
	itob
	b*
	b+
	dup
	bitlen
	int 128
	<=

	// this.stakeAccumulator.value + (stakedAmountPayment.amount as uint128) * (roundsLeftInBin as uint128) overflowed 128 bits
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 16
	-
	swap
	substring3
	app_global_put

	// contracts/stakingPool.algo.ts:223
	// for (let i = 0; i < this.stakers.value.length; i += 1)
	int 0
	frame_bury 3 // i: uint64

*for_0:
	// contracts/stakingPool.algo.ts:223
	// i < this.stakers.value.length
	frame_dig 3 // i: uint64
	int 200
	<
	bz *for_0_end

	// *if2_condition
	// contracts/stakingPool.algo.ts:224
	// globals.opcodeBudget < 300
	global OpcodeBudget
	int 300
	<
	bz *if2_end

	// *if2_consequent
	// contracts/stakingPool.algo.ts:225
	// increaseOpcodeBudget()
	itxn_begin
	int appl
	itxn_field TypeEnum
	int 0
	itxn_field Fee
	byte b64 CoEB // #pragma version 10; int 1
	dup
	itxn_field ApprovalProgram
	itxn_field ClearStateProgram
	int DeleteApplication
	itxn_field OnCompletion
	itxn_submit

*if2_end:
	// contracts/stakingPool.algo.ts:227
	// cmpStaker = clone(this.stakers.value[i])
	frame_dig 3 // i: uint64
	int 64
	* // acc * typeLength
	int 64
	byte 0x7374616b657273 // "stakers"
	cover 2
	box_extract
	frame_bury 4 // cmpStaker: (address,uint64,uint64,uint64,uint64)

	// *if3_condition
	// contracts/stakingPool.algo.ts:228
	// cmpStaker.account === staker
	frame_dig 4 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	extract 0 32
	frame_dig -2 // staker: Address
	==
	bz *if3_end

	// *if3_consequent
	// contracts/stakingPool.algo.ts:230
	// cmpStaker.balance += stakedAmountPayment.amount
	frame_dig 4 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	int 32 // headOffset
	frame_dig 4 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	extract 32 8
	btoi
	frame_dig -1 // stakedAmountPayment: PayTxn
	gtxns Amount
	+
	itob
	replace3
	frame_bury 4 // cmpStaker: (address,uint64,uint64,uint64,uint64)

	// contracts/stakingPool.algo.ts:231
	// cmpStaker.entryRound = entryRound
	frame_dig 4 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	int 56 // headOffset
	frame_dig 0 // entryRound: uint64
	itob
	replace3
	frame_bury 4 // cmpStaker: (address,uint64,uint64,uint64,uint64)

	// contracts/stakingPool.algo.ts:234
	// this.stakers.value[i] = cmpStaker
	frame_dig 3 // i: uint64
	int 64
	* // acc * typeLength
	frame_dig 4 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	byte 0x7374616b657273 // "stakers"
	cover 2
	box_replace

	// contracts/stakingPool.algo.ts:236
	// return entryRound
	frame_dig 0 // entryRound: uint64
	b *addStake*return

*if3_end:
	// *if4_condition
	// contracts/stakingPool.algo.ts:238
	// firstEmpty === 0 && cmpStaker.account === globals.zeroAddress
	frame_dig 1 // firstEmpty: uint64
	int 0
	==
	dup
	bz *skip_and2
	frame_dig 4 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	extract 0 32
	global ZeroAddress
	==
	&&

*skip_and2:
	bz *if4_end

	// *if4_consequent
	// contracts/stakingPool.algo.ts:239
	// firstEmpty = i + 1
	frame_dig 3 // i: uint64
	int 1
	+
	frame_bury 1 // firstEmpty: uint64

*if4_end:

*for_0_continue:
	// contracts/stakingPool.algo.ts:223
	// i += 1
	frame_dig 3 // i: uint64
	int 1
	+
	frame_bury 3 // i: uint64
	b *for_0

*for_0_end:
	// *if5_condition
	// contracts/stakingPool.algo.ts:243
	// firstEmpty === 0
	frame_dig 1 // firstEmpty: uint64
	int 0
	==
	bz *if5_end

	// *if5_consequent
	// Staking pool full
	err

*if5_end:
	// contracts/stakingPool.algo.ts:250
	// assert(stakedAmountPayment.amount >= this.minEntryStake.value, 'must stake at least the minimum for this pool')
	frame_dig -1 // stakedAmountPayment: PayTxn
	gtxns Amount
	byte 0x6d696e456e7472795374616b65 // "minEntryStake"
	app_global_get
	>=

	// must stake at least the minimum for this pool
	assert

	// contracts/stakingPool.algo.ts:252
	// assert(this.stakers.value[firstEmpty - 1].account === globals.zeroAddress)
	frame_dig 1 // firstEmpty: uint64
	int 1
	-
	int 64
	* // acc * typeLength
	int 0
	+
	int 32
	byte 0x7374616b657273 // "stakers"
	cover 2
	box_extract
	global ZeroAddress
	==
	assert

	// contracts/stakingPool.algo.ts:253
	// this.stakers.value[firstEmpty - 1] = {
	//             account: staker,
	//             balance: stakedAmountPayment.amount,
	//             totalRewarded: 0,
	//             rewardTokenBalance: 0,
	//             entryRound: entryRound,
	//         }
	frame_dig 1 // firstEmpty: uint64
	int 1
	-
	int 64
	* // acc * typeLength
	frame_dig -2 // staker: Address
	frame_dig -1 // stakedAmountPayment: PayTxn
	gtxns Amount
	itob
	concat
	byte 0x0000000000000000
	concat
	byte 0x0000000000000000
	concat
	frame_dig 0 // entryRound: uint64
	itob
	concat
	byte 0x7374616b657273 // "stakers"
	cover 2
	box_replace

	// contracts/stakingPool.algo.ts:260
	// this.numStakers.value += 1
	byte 0x6e756d5374616b657273 // "numStakers"
	app_global_get
	int 1
	+
	byte 0x6e756d5374616b657273 // "numStakers"
	swap
	app_global_put

	// contracts/stakingPool.algo.ts:261
	// return entryRound
	frame_dig 0 // entryRound: uint64

*addStake*return:
	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 4
	retsub

// removeStake(address,uint64)void
*abi_route_removeStake:
	// amountToUnstake: uint64
	txna ApplicationArgs 2
	btoi

	// staker: address
	txna ApplicationArgs 1
	dup
	len
	int 32
	==

	// argument 1 (staker) for removeStake must be a address
	assert

	// execute removeStake(address,uint64)void
	callsub removeStake
	int 1
	return

// removeStake(staker: Address, amountToUnstake: uint64): void
//
// Removes stake on behalf of caller (removing own stake).  If any token rewards exist, those are always sent in
// full. Also notifies the validator contract for this pools validator of the staker / balance changes.
//
// @param {Address} staker - account to remove.  normally same as sender, but the validator owner or manager can also call
// this to remove the specified staker explicitly. The removed stake MUST only go to the staker of course.  This is
// so a validator can shut down a poool and refund the stakers.  It can also be used to kick out stakers who no longer
// meet the gating requirements (determined by the node daemon).
// @param {uint64} amountToUnstake - The amount of stake to be removed.  Specify 0 to remove all stake.
// @throws {Error} If the account has insufficient balance or if the account is not found.
removeStake:
	proto 2 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x
	dupn 6

	// *if6_condition
	// contracts/stakingPool.algo.ts:278
	// staker !== this.txn.sender
	frame_dig -1 // staker: Address
	txn Sender
	!=
	bz *if6_end

	// *if6_consequent
	// contracts/stakingPool.algo.ts:279
	// assert(
	//                 this.isOwnerOrManagerCaller(),
	//                 'If staker is not sender in removeStake call, then sender MUST be owner or manager of validator',
	//             )
	callsub isOwnerOrManagerCaller

	// If staker is not sender in removeStake call, then sender MUST be owner or manager of validator
	assert

*if6_end:
	// contracts/stakingPool.algo.ts:285
	// this.checkIfBinClosed()
	callsub checkIfBinClosed

	// contracts/stakingPool.algo.ts:287
	// for (let i = 0; i < this.stakers.value.length; i += 1)
	int 0
	frame_bury 0 // i: uint64

*for_1:
	// contracts/stakingPool.algo.ts:287
	// i < this.stakers.value.length
	frame_dig 0 // i: uint64
	int 200
	<
	bz *for_1_end

	// *if7_condition
	// contracts/stakingPool.algo.ts:288
	// globals.opcodeBudget < 300
	global OpcodeBudget
	int 300
	<
	bz *if7_end

	// *if7_consequent
	// contracts/stakingPool.algo.ts:289
	// increaseOpcodeBudget()
	itxn_begin
	int appl
	itxn_field TypeEnum
	int 0
	itxn_field Fee
	byte b64 CoEB // #pragma version 10; int 1
	dup
	itxn_field ApprovalProgram
	itxn_field ClearStateProgram
	int DeleteApplication
	itxn_field OnCompletion
	itxn_submit

*if7_end:
	// contracts/stakingPool.algo.ts:291
	// cmpStaker = clone(this.stakers.value[i])
	frame_dig 0 // i: uint64
	int 64
	* // acc * typeLength
	int 64
	byte 0x7374616b657273 // "stakers"
	cover 2
	box_extract
	frame_bury 1 // cmpStaker: (address,uint64,uint64,uint64,uint64)

	// *if8_condition
	// contracts/stakingPool.algo.ts:292
	// cmpStaker.account === staker
	frame_dig 1 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	extract 0 32
	frame_dig -1 // staker: Address
	==
	bz *if8_end

	// *if8_consequent
	// *if9_condition
	// contracts/stakingPool.algo.ts:293
	// amountToUnstake === 0
	frame_dig -2 // amountToUnstake: uint64
	int 0
	==
	bz *if9_end

	// *if9_consequent
	// contracts/stakingPool.algo.ts:295
	// amountToUnstake = cmpStaker.balance
	frame_dig 1 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	extract 32 8
	btoi
	frame_bury -2 // amountToUnstake: uint64

*if9_end:
	// *if10_condition
	// contracts/stakingPool.algo.ts:297
	// cmpStaker.balance < amountToUnstake
	frame_dig 1 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	extract 32 8
	btoi
	frame_dig -2 // amountToUnstake: uint64
	<
	bz *if10_end

	// *if10_consequent
	// Insufficient balance
	err

*if10_end:
	// contracts/stakingPool.algo.ts:300
	// cmpStaker.balance -= amountToUnstake
	frame_dig 1 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	int 32 // headOffset
	frame_dig 1 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	extract 32 8
	btoi
	frame_dig -2 // amountToUnstake: uint64
	-
	itob
	replace3
	frame_bury 1 // cmpStaker: (address,uint64,uint64,uint64,uint64)

	// contracts/stakingPool.algo.ts:301
	// this.totalAlgoStaked.value -= amountToUnstake
	byte 0x7374616b6564 // "staked"
	app_global_get
	frame_dig -2 // amountToUnstake: uint64
	-
	byte 0x7374616b6564 // "staked"
	swap
	app_global_put

	// contracts/stakingPool.algo.ts:303
	// amountRewardTokenRemoved = 0
	int 0
	frame_bury 2 // amountRewardTokenRemoved: uint64

	// *if11_condition
	// contracts/stakingPool.algo.ts:304
	// cmpStaker.rewardTokenBalance > 0
	frame_dig 1 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	extract 48 8
	btoi
	int 0
	>
	bz *if11_end

	// *if11_consequent
	// *if12_condition
	// contracts/stakingPool.algo.ts:306
	// this.poolId.value === 1
	byte 0x706f6f6c4964 // "poolId"
	app_global_get
	int 1
	==
	bz *if12_else

	// *if12_consequent
	// contracts/stakingPool.algo.ts:307
	// validatorConfig = sendMethodCall<typeof ValidatorRegistry.prototype.getValidatorConfig>({
	//                             applicationID: this.creatingValidatorContractAppId.value,
	//                             methodArgs: [this.validatorId.value],
	//                         })
	itxn_begin
	int appl
	itxn_field TypeEnum
	method "getValidatorConfig(uint64)(uint64,address,address,uint64,uint8,address,uint64[4],uint64,uint64,uint64,uint32,uint32,address,uint64,uint64,uint8,uint64,uint64)"
	itxn_field ApplicationArgs

	// contracts/stakingPool.algo.ts:308
	// applicationID: this.creatingValidatorContractAppId.value
	byte 0x63726561746f72417070 // "creatorApp"
	app_global_get
	itxn_field ApplicationID

	// contracts/stakingPool.algo.ts:309
	// methodArgs: [this.validatorId.value]
	byte 0x76616c696461746f724964 // "validatorId"
	app_global_get
	itob
	itxn_field ApplicationArgs

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	itxn NumLogs
	int 1
	-
	itxnas Logs
	extract 4 0
	frame_bury 3 // validatorConfig: (uint64,address,address,uint64,uint8,address,uint64[4],uint64,uint64,uint64,uint32,uint32,address,uint64,uint64,uint8,uint64,uint64)

	// contracts/stakingPool.algo.ts:315
	// sendAssetTransfer({
	//                             xferAsset: AssetID.fromUint64(validatorConfig.rewardTokenId),
	//                             assetReceiver: staker,
	//                             assetAmount: cmpStaker.rewardTokenBalance,
	//                         })
	itxn_begin
	int axfer
	itxn_field TypeEnum

	// contracts/stakingPool.algo.ts:316
	// xferAsset: AssetID.fromUint64(validatorConfig.rewardTokenId)
	frame_dig 3 // validatorConfig: (uint64,address,address,uint64,uint8,address,uint64[4],uint64,uint64,uint64,uint32,uint32,address,uint64,uint64,uint8,uint64,uint64)
	extract 153 8
	btoi
	itxn_field XferAsset

	// contracts/stakingPool.algo.ts:317
	// assetReceiver: staker
	frame_dig -1 // staker: Address
	itxn_field AssetReceiver

	// contracts/stakingPool.algo.ts:318
	// assetAmount: cmpStaker.rewardTokenBalance
	frame_dig 1 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	extract 48 8
	btoi
	itxn_field AssetAmount

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contracts/stakingPool.algo.ts:320
	// amountRewardTokenRemoved = cmpStaker.rewardTokenBalance
	frame_dig 1 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	extract 48 8
	btoi
	frame_bury 2 // amountRewardTokenRemoved: uint64

	// contracts/stakingPool.algo.ts:321
	// cmpStaker.rewardTokenBalance = 0
	frame_dig 1 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	byte 0x0000000000000000
	replace2 48
	frame_bury 1 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	b *if12_end

*if12_else:
	// contracts/stakingPool.algo.ts:326
	// amountRewardTokenRemoved = cmpStaker.rewardTokenBalance
	frame_dig 1 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	extract 48 8
	btoi
	frame_bury 2 // amountRewardTokenRemoved: uint64

	// contracts/stakingPool.algo.ts:327
	// cmpStaker.rewardTokenBalance = 0
	frame_dig 1 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	byte 0x0000000000000000
	replace2 48
	frame_bury 1 // cmpStaker: (address,uint64,uint64,uint64,uint64)

*if12_end:

*if11_end:
	// contracts/stakingPool.algo.ts:332
	// assert(
	//                     cmpStaker.balance === 0 || cmpStaker.balance >= this.minEntryStake.value,
	//                     'cannot reduce balance below minimum allowed stake unless all is removed',
	//                 )
	frame_dig 1 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	extract 32 8
	btoi
	int 0
	==
	dup
	bnz *skip_or0
	frame_dig 1 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	extract 32 8
	btoi
	byte 0x6d696e456e7472795374616b65 // "minEntryStake"
	app_global_get
	>=
	||

*skip_or0:
	// cannot reduce balance below minimum allowed stake unless all is removed
	assert

	// contracts/stakingPool.algo.ts:340
	// sendPayment({
	//                     amount: amountToUnstake,
	//                     receiver: staker,
	//                     note: 'unstaked',
	//                 })
	itxn_begin
	int pay
	itxn_field TypeEnum

	// contracts/stakingPool.algo.ts:341
	// amount: amountToUnstake
	frame_dig -2 // amountToUnstake: uint64
	itxn_field Amount

	// contracts/stakingPool.algo.ts:342
	// receiver: staker
	frame_dig -1 // staker: Address
	itxn_field Receiver

	// contracts/stakingPool.algo.ts:343
	// note: 'unstaked'
	byte 0x756e7374616b6564 // "unstaked"
	itxn_field Note

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contracts/stakingPool.algo.ts:345
	// stakerRemoved = false
	int 0
	frame_bury 4 // stakerRemoved: bool

	// *if13_condition
	// contracts/stakingPool.algo.ts:346
	// cmpStaker.balance === 0
	frame_dig 1 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	extract 32 8
	btoi
	int 0
	==
	bz *if13_end

	// *if13_consequent
	// contracts/stakingPool.algo.ts:348
	// this.numStakers.value -= 1
	byte 0x6e756d5374616b657273 // "numStakers"
	app_global_get
	int 1
	-
	byte 0x6e756d5374616b657273 // "numStakers"
	swap
	app_global_put

	// contracts/stakingPool.algo.ts:349
	// cmpStaker.account = globals.zeroAddress
	frame_dig 1 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	int 0
	global ZeroAddress
	replace3
	frame_bury 1 // cmpStaker: (address,uint64,uint64,uint64,uint64)

	// contracts/stakingPool.algo.ts:350
	// cmpStaker.totalRewarded = 0
	frame_dig 1 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	byte 0x0000000000000000
	replace2 40
	frame_bury 1 // cmpStaker: (address,uint64,uint64,uint64,uint64)

	// contracts/stakingPool.algo.ts:351
	// cmpStaker.rewardTokenBalance = 0
	frame_dig 1 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	byte 0x0000000000000000
	replace2 48
	frame_bury 1 // cmpStaker: (address,uint64,uint64,uint64,uint64)

	// contracts/stakingPool.algo.ts:352
	// stakerRemoved = true
	int 1
	frame_bury 4 // stakerRemoved: bool

*if13_end:
	// contracts/stakingPool.algo.ts:355
	// this.stakers.value[i] = cmpStaker
	frame_dig 0 // i: uint64
	int 64
	* // acc * typeLength
	frame_dig 1 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	byte 0x7374616b657273 // "stakers"
	cover 2
	box_replace

	// contracts/stakingPool.algo.ts:357
	// roundsLeftInBin = this.binRoundStart.value + this.roundsPerDay.value - globals.round
	byte 0x62696e526f756e645374617274 // "binRoundStart"
	app_global_get
	byte 0x726f756e6473506572446179 // "roundsPerDay"
	app_global_get
	+
	global Round
	-
	frame_bury 5 // roundsLeftInBin: uint64

	// contracts/stakingPool.algo.ts:358
	// subtractAmount: uint128 = (amountToUnstake as uint128) * (roundsLeftInBin as uint128)
	frame_dig -2 // amountToUnstake: uint64
	itob
	frame_dig 5 // roundsLeftInBin: uint64
	itob
	b*
	dup
	bitlen
	int 128
	<=

	// (amountToUnstake as uint128) * (roundsLeftInBin as uint128) overflowed 128 bits
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 16
	-
	swap
	substring3
	frame_bury 6 // subtractAmount: uint128

	// contracts/stakingPool.algo.ts:359
	// this.stakeAccumulator.value = this.stakeAccumulator.value - subtractAmount
	byte 0x7374616b65416363756d756c61746f72 // "stakeAccumulator"
	dup
	app_global_get
	frame_dig 6 // subtractAmount: uint128
	b-
	dup
	bitlen
	int 128
	<=

	// this.stakeAccumulator.value - subtractAmount overflowed 128 bits
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 16
	-
	swap
	substring3
	app_global_put

	// contracts/stakingPool.algo.ts:364
	// sendMethodCall<typeof ValidatorRegistry.prototype.stakeRemoved>({
	//                     applicationID: this.creatingValidatorContractAppId.value,
	//                     methodArgs: [
	//                         { id: this.validatorId.value, poolId: this.poolId.value, poolAppId: this.app.id },
	//                         staker,
	//                         amountToUnstake,
	//                         amountRewardTokenRemoved,
	//                         stakerRemoved,
	//                     ],
	//                 })
	itxn_begin
	int appl
	itxn_field TypeEnum
	method "stakeRemoved((uint64,uint64,uint64),address,uint64,uint64,bool)void"
	itxn_field ApplicationArgs

	// contracts/stakingPool.algo.ts:365
	// applicationID: this.creatingValidatorContractAppId.value
	byte 0x63726561746f72417070 // "creatorApp"
	app_global_get
	itxn_field ApplicationID

	// contracts/stakingPool.algo.ts:366
	// methodArgs: [
	//                         { id: this.validatorId.value, poolId: this.poolId.value, poolAppId: this.app.id },
	//                         staker,
	//                         amountToUnstake,
	//                         amountRewardTokenRemoved,
	//                         stakerRemoved,
	//                     ]
	byte 0x76616c696461746f724964 // "validatorId"
	app_global_get
	itob
	byte 0x706f6f6c4964 // "poolId"
	app_global_get
	itob
	concat
	txna Applications 0
	itob
	concat
	itxn_field ApplicationArgs
	frame_dig -1 // staker: Address
	itxn_field ApplicationArgs
	frame_dig -2 // amountToUnstake: uint64
	itob
	itxn_field ApplicationArgs
	frame_dig 2 // amountRewardTokenRemoved: uint64
	itob
	itxn_field ApplicationArgs
	frame_dig 4 // stakerRemoved: bool
	byte 0x00
	int 0
	uncover 2
	setbit
	itxn_field ApplicationArgs

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contracts/stakingPool.algo.ts:374
	// return
	retsub

*if8_end:

*for_1_continue:
	// contracts/stakingPool.algo.ts:287
	// i += 1
	frame_dig 0 // i: uint64
	int 1
	+
	frame_bury 0 // i: uint64
	b *for_1

*for_1_end:
	// account not found
	err
	retsub

// claimTokens()void
*abi_route_claimTokens:
	// execute claimTokens()void
	callsub claimTokens
	int 1
	return

// claimTokens(): void
//
// Claims all the available reward tokens a staker has available, sending their entire balance to the staker from
// pool 1 (either directly, or via validator->pool1 to pay it out)
// Also notifies the validator contract for this pools validator of the staker / balance changes.
claimTokens:
	proto 0 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x
	dupn 4

	// contracts/stakingPool.algo.ts:389
	// staker = this.txn.sender
	txn Sender
	frame_bury 0 // staker: address

	// contracts/stakingPool.algo.ts:391
	// for (let i = 0; i < this.stakers.value.length; i += 1)
	int 0
	frame_bury 1 // i: uint64

*for_2:
	// contracts/stakingPool.algo.ts:391
	// i < this.stakers.value.length
	frame_dig 1 // i: uint64
	int 200
	<
	bz *for_2_end

	// *if14_condition
	// contracts/stakingPool.algo.ts:392
	// globals.opcodeBudget < 300
	global OpcodeBudget
	int 300
	<
	bz *if14_end

	// *if14_consequent
	// contracts/stakingPool.algo.ts:393
	// increaseOpcodeBudget()
	itxn_begin
	int appl
	itxn_field TypeEnum
	int 0
	itxn_field Fee
	byte b64 CoEB // #pragma version 10; int 1
	dup
	itxn_field ApprovalProgram
	itxn_field ClearStateProgram
	int DeleteApplication
	itxn_field OnCompletion
	itxn_submit

*if14_end:
	// contracts/stakingPool.algo.ts:395
	// cmpStaker = clone(this.stakers.value[i])
	frame_dig 1 // i: uint64
	int 64
	* // acc * typeLength
	int 64
	byte 0x7374616b657273 // "stakers"
	cover 2
	box_extract
	frame_bury 2 // cmpStaker: (address,uint64,uint64,uint64,uint64)

	// *if15_condition
	// contracts/stakingPool.algo.ts:396
	// cmpStaker.account === staker
	frame_dig 2 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	extract 0 32
	frame_dig 0 // staker: address
	==
	bz *if15_end

	// *if15_consequent
	// *if16_condition
	// contracts/stakingPool.algo.ts:397
	// cmpStaker.rewardTokenBalance === 0
	frame_dig 2 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	extract 48 8
	btoi
	int 0
	==
	bz *if16_end

	// *if16_consequent
	// contracts/stakingPool.algo.ts:398
	// return
	retsub

*if16_end:
	// contracts/stakingPool.algo.ts:400
	// amountRewardTokenRemoved = 0
	int 0
	frame_bury 3 // amountRewardTokenRemoved: uint64

	// *if17_condition
	// contracts/stakingPool.algo.ts:402
	// this.poolId.value === 1
	byte 0x706f6f6c4964 // "poolId"
	app_global_get
	int 1
	==
	bz *if17_else

	// *if17_consequent
	// contracts/stakingPool.algo.ts:403
	// validatorConfig = sendMethodCall<typeof ValidatorRegistry.prototype.getValidatorConfig>({
	//                         applicationID: this.creatingValidatorContractAppId.value,
	//                         methodArgs: [this.validatorId.value],
	//                     })
	itxn_begin
	int appl
	itxn_field TypeEnum
	method "getValidatorConfig(uint64)(uint64,address,address,uint64,uint8,address,uint64[4],uint64,uint64,uint64,uint32,uint32,address,uint64,uint64,uint8,uint64,uint64)"
	itxn_field ApplicationArgs

	// contracts/stakingPool.algo.ts:404
	// applicationID: this.creatingValidatorContractAppId.value
	byte 0x63726561746f72417070 // "creatorApp"
	app_global_get
	itxn_field ApplicationID

	// contracts/stakingPool.algo.ts:405
	// methodArgs: [this.validatorId.value]
	byte 0x76616c696461746f724964 // "validatorId"
	app_global_get
	itob
	itxn_field ApplicationArgs

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	itxn NumLogs
	int 1
	-
	itxnas Logs
	extract 4 0
	frame_bury 4 // validatorConfig: (uint64,address,address,uint64,uint8,address,uint64[4],uint64,uint64,uint64,uint32,uint32,address,uint64,uint64,uint8,uint64,uint64)

	// contracts/stakingPool.algo.ts:410
	// sendAssetTransfer({
	//                         xferAsset: AssetID.fromUint64(validatorConfig.rewardTokenId),
	//                         assetReceiver: staker,
	//                         assetAmount: cmpStaker.rewardTokenBalance,
	//                     })
	itxn_begin
	int axfer
	itxn_field TypeEnum

	// contracts/stakingPool.algo.ts:411
	// xferAsset: AssetID.fromUint64(validatorConfig.rewardTokenId)
	frame_dig 4 // validatorConfig: (uint64,address,address,uint64,uint8,address,uint64[4],uint64,uint64,uint64,uint32,uint32,address,uint64,uint64,uint8,uint64,uint64)
	extract 153 8
	btoi
	itxn_field XferAsset

	// contracts/stakingPool.algo.ts:412
	// assetReceiver: staker
	frame_dig 0 // staker: address
	itxn_field AssetReceiver

	// contracts/stakingPool.algo.ts:413
	// assetAmount: cmpStaker.rewardTokenBalance
	frame_dig 2 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	extract 48 8
	btoi
	itxn_field AssetAmount

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contracts/stakingPool.algo.ts:415
	// amountRewardTokenRemoved = cmpStaker.rewardTokenBalance
	frame_dig 2 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	extract 48 8
	btoi
	frame_bury 3 // amountRewardTokenRemoved: uint64

	// contracts/stakingPool.algo.ts:416
	// cmpStaker.rewardTokenBalance = 0
	frame_dig 2 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	byte 0x0000000000000000
	replace2 48
	frame_bury 2 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	b *if17_end

*if17_else:
	// contracts/stakingPool.algo.ts:421
	// amountRewardTokenRemoved = cmpStaker.rewardTokenBalance
	frame_dig 2 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	extract 48 8
	btoi
	frame_bury 3 // amountRewardTokenRemoved: uint64

	// contracts/stakingPool.algo.ts:422
	// cmpStaker.rewardTokenBalance = 0
	frame_dig 2 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	byte 0x0000000000000000
	replace2 48
	frame_bury 2 // cmpStaker: (address,uint64,uint64,uint64,uint64)

*if17_end:
	// contracts/stakingPool.algo.ts:426
	// this.stakers.value[i] = cmpStaker
	frame_dig 1 // i: uint64
	int 64
	* // acc * typeLength
	frame_dig 2 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	byte 0x7374616b657273 // "stakers"
	cover 2
	box_replace

	// contracts/stakingPool.algo.ts:431
	// sendMethodCall<typeof ValidatorRegistry.prototype.stakeRemoved>({
	//                     applicationID: this.creatingValidatorContractAppId.value,
	//                     methodArgs: [
	//                         { id: this.validatorId.value, poolId: this.poolId.value, poolAppId: this.app.id },
	//                         staker,
	//                         0, // no algo removed
	//                         amountRewardTokenRemoved,
	//                         false, // staker isn't being removed.
	//                     ],
	//                 })
	itxn_begin
	int appl
	itxn_field TypeEnum
	method "stakeRemoved((uint64,uint64,uint64),address,uint64,uint64,bool)void"
	itxn_field ApplicationArgs

	// contracts/stakingPool.algo.ts:432
	// applicationID: this.creatingValidatorContractAppId.value
	byte 0x63726561746f72417070 // "creatorApp"
	app_global_get
	itxn_field ApplicationID

	// contracts/stakingPool.algo.ts:433
	// methodArgs: [
	//                         { id: this.validatorId.value, poolId: this.poolId.value, poolAppId: this.app.id },
	//                         staker,
	//                         0, // no algo removed
	//                         amountRewardTokenRemoved,
	//                         false, // staker isn't being removed.
	//                     ]
	byte 0x76616c696461746f724964 // "validatorId"
	app_global_get
	itob
	byte 0x706f6f6c4964 // "poolId"
	app_global_get
	itob
	concat
	txna Applications 0
	itob
	concat
	itxn_field ApplicationArgs
	frame_dig 0 // staker: address
	itxn_field ApplicationArgs
	byte 0x0000000000000000
	itxn_field ApplicationArgs
	frame_dig 3 // amountRewardTokenRemoved: uint64
	itob
	itxn_field ApplicationArgs
	int 0
	byte 0x00
	int 0
	uncover 2
	setbit
	itxn_field ApplicationArgs

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contracts/stakingPool.algo.ts:441
	// return
	retsub

*if15_end:

*for_2_continue:
	// contracts/stakingPool.algo.ts:391
	// i += 1
	frame_dig 1 // i: uint64
	int 1
	+
	frame_bury 1 // i: uint64
	b *for_2

*for_2_end:
	// account not found
	err
	retsub

// getStakerInfo(address)(address,uint64,uint64,uint64,uint64)
*abi_route_getStakerInfo:
	// The ABI return prefix
	byte 0x151f7c75

	// staker: address
	txna ApplicationArgs 1
	dup
	len
	int 32
	==

	// argument 0 (staker) for getStakerInfo must be a address
	assert

	// execute getStakerInfo(address)(address,uint64,uint64,uint64,uint64)
	callsub getStakerInfo
	concat
	log
	int 1
	return

// getStakerInfo(staker: Address): StakedInfo
//
// Retrieves the staked information for a given staker.
//
// @param {Address} staker - The address of the staker.
// @returns {StakedInfo} - The staked information for the given staker.
// @throws {Error} - If the staker's account is not found.
getStakerInfo:
	proto 1 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x

	// contracts/stakingPool.algo.ts:456
	// for (let i = 0; i < this.stakers.value.length; i += 1)
	int 0
	frame_bury 0 // i: uint64

*for_3:
	// contracts/stakingPool.algo.ts:456
	// i < this.stakers.value.length
	frame_dig 0 // i: uint64
	int 200
	<
	bz *for_3_end

	// *if18_condition
	// contracts/stakingPool.algo.ts:457
	// globals.opcodeBudget < 200
	global OpcodeBudget
	int 200
	<
	bz *if18_end

	// *if18_consequent
	// contracts/stakingPool.algo.ts:458
	// increaseOpcodeBudget()
	itxn_begin
	int appl
	itxn_field TypeEnum
	int 0
	itxn_field Fee
	byte b64 CoEB // #pragma version 10; int 1
	dup
	itxn_field ApprovalProgram
	itxn_field ClearStateProgram
	int DeleteApplication
	itxn_field OnCompletion
	itxn_submit

*if18_end:
	// *if19_condition
	// contracts/stakingPool.algo.ts:460
	// this.stakers.value[i].account === staker
	frame_dig 0 // i: uint64
	int 64
	* // acc * typeLength
	int 0
	+
	int 32
	byte 0x7374616b657273 // "stakers"
	cover 2
	box_extract
	frame_dig -1 // staker: Address
	==
	bz *if19_end

	// *if19_consequent
	// contracts/stakingPool.algo.ts:461
	// return this.stakers.value[i]
	frame_dig 0 // i: uint64
	int 64
	* // acc * typeLength
	int 64
	byte 0x7374616b657273 // "stakers"
	cover 2
	box_extract
	b *getStakerInfo*return

*if19_end:

*for_3_continue:
	// contracts/stakingPool.algo.ts:456
	// i += 1
	frame_dig 0 // i: uint64
	int 1
	+
	frame_bury 0 // i: uint64
	b *for_3

*for_3_end:
	// account not found
	err

*getStakerInfo*return:
	// set the subroutine return value
	frame_bury 0
	retsub

// payTokenReward(address,uint64,uint64)void
*abi_route_payTokenReward:
	// amountToSend: uint64
	txna ApplicationArgs 3
	btoi

	// rewardToken: uint64
	txna ApplicationArgs 2
	btoi

	// staker: address
	txna ApplicationArgs 1
	dup
	len
	int 32
	==

	// argument 2 (staker) for payTokenReward must be a address
	assert

	// execute payTokenReward(address,uint64,uint64)void
	callsub payTokenReward
	int 1
	return

// payTokenReward(staker: Address, rewardToken: uint64, amountToSend: uint64): void
//
// [Internal protocol method] Remove a specified amount of 'community token' rewards for a staker.
// This can ONLY be called by our validator and only if we're pool 1 - with the token.
// Note: this can also be called by validator as part of OWNER wanting to send the reward tokens
// somewhere else (ie if they're sunsetting their validator and need the reward tokens back).
// It's up to the validator to ensure that the balance in rewardTokenHeldBack is honored.
// @param staker - the staker account to send rewards to
// @param rewardToken - id of reward token (to avoid re-entrancy in calling validator back to get id)
// @param amountToSend - amount to send the staker (there is significant trust here(!) - also why only validator can call us
payTokenReward:
	proto 3 0

	// contracts/stakingPool.algo.ts:479
	// assert(
	//             this.txn.sender === this.creatingValidatorContractAppId.value.address,
	//             'this can only be called via the validator contract',
	//         )
	txn Sender
	byte 0x63726561746f72417070 // "creatorApp"
	app_global_get
	app_params_get AppAddress
	pop
	==

	// this can only be called via the validator contract
	assert

	// contracts/stakingPool.algo.ts:483
	// assert(this.poolId.value === 1, 'must be pool 1 in order to be called to pay out token rewards')
	byte 0x706f6f6c4964 // "poolId"
	app_global_get
	int 1
	==

	// must be pool 1 in order to be called to pay out token rewards
	assert

	// contracts/stakingPool.algo.ts:484
	// assert(rewardToken !== 0, 'can only claim token rewards from validator that has them')
	frame_dig -2 // rewardToken: uint64
	int 0
	!=

	// can only claim token rewards from validator that has them
	assert

	// contracts/stakingPool.algo.ts:487
	// sendAssetTransfer({
	//             xferAsset: AssetID.fromUint64(rewardToken),
	//             assetReceiver: staker,
	//             assetAmount: amountToSend,
	//         })
	itxn_begin
	int axfer
	itxn_field TypeEnum

	// contracts/stakingPool.algo.ts:488
	// xferAsset: AssetID.fromUint64(rewardToken)
	frame_dig -2 // rewardToken: uint64
	itxn_field XferAsset

	// contracts/stakingPool.algo.ts:489
	// assetReceiver: staker
	frame_dig -1 // staker: Address
	itxn_field AssetReceiver

	// contracts/stakingPool.algo.ts:490
	// assetAmount: amountToSend
	frame_dig -3 // amountToSend: uint64
	itxn_field AssetAmount

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

// updateAlgodVer(string)void
*abi_route_updateAlgodVer:
	// algodVer: string
	txna ApplicationArgs 1
	extract 2 0

	// execute updateAlgodVer(string)void
	callsub updateAlgodVer
	int 1
	return

// updateAlgodVer(algodVer: string): void
//
// Update the (honor system) algod version for the node associated to this pool.  The node management daemon
// should compare its current nodes version to the version stored in global state, updating when different.
// The reti node daemon composes its own version string using format:
// {major}.{minor}.{build} {branch} [{commit hash}],
// ie: 3.22.0 rel/stable [6b508975]
// [ ONLY OWNER OR MANAGER CAN CALL ]
// @param {string} algodVer - string representing the algorand node daemon version (reti node daemon composes its own meta version)
updateAlgodVer:
	proto 1 0

	// contracts/stakingPool.algo.ts:504
	// assert(this.isOwnerOrManagerCaller(), 'can only be called by owner or manager of validator')
	callsub isOwnerOrManagerCaller

	// can only be called by owner or manager of validator
	assert

	// contracts/stakingPool.algo.ts:505
	// this.algodVer.value = algodVer
	byte 0x616c676f64566572 // "algodVer"
	frame_dig -1 // algodVer: string
	app_global_put
	retsub

// epochBalanceUpdate()void
*abi_route_epochBalanceUpdate:
	// execute epochBalanceUpdate()void
	callsub epochBalanceUpdate
	int 1
	return

// epochBalanceUpdate(): void
//
// Updates the balance of stakers in the pool based on the received 'rewards' (current balance vs known staked balance)
// stakers outstanding balance is adjusted based on their % of stake and time in the current epoch - so that balance
// compounds over time and staker can remove that amount at will.
// The validator is paid their percentage each epoch payout.
//
// Note: ANYONE can call this.
epochBalanceUpdate:
	proto 0 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x
	dupn 37

	// contracts/stakingPool.algo.ts:518
	// validatorConfig = sendMethodCall<typeof ValidatorRegistry.prototype.getValidatorConfig>({
	//             applicationID: this.creatingValidatorContractAppId.value,
	//             methodArgs: [this.validatorId.value],
	//         })
	itxn_begin
	int appl
	itxn_field TypeEnum
	method "getValidatorConfig(uint64)(uint64,address,address,uint64,uint8,address,uint64[4],uint64,uint64,uint64,uint32,uint32,address,uint64,uint64,uint8,uint64,uint64)"
	itxn_field ApplicationArgs

	// contracts/stakingPool.algo.ts:519
	// applicationID: this.creatingValidatorContractAppId.value
	byte 0x63726561746f72417070 // "creatorApp"
	app_global_get
	itxn_field ApplicationID

	// contracts/stakingPool.algo.ts:520
	// methodArgs: [this.validatorId.value]
	byte 0x76616c696461746f724964 // "validatorId"
	app_global_get
	itob
	itxn_field ApplicationArgs

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	itxn NumLogs
	int 1
	-
	itxnas Logs
	extract 4 0
	frame_bury 0 // validatorConfig: (uint64,address,address,uint64,uint8,address,uint64[4],uint64,uint64,uint64,uint32,uint32,address,uint64,uint64,uint8,uint64,uint64)

	// contracts/stakingPool.algo.ts:527
	// epochRoundLength = validatorConfig.epochRoundLength as uint64
	frame_dig 0 // validatorConfig: (uint64,address,address,uint64,uint8,address,uint64[4],uint64,uint64,uint64,uint32,uint32,address,uint64,uint64,uint8,uint64,uint64)
	extract 169 4
	btoi
	frame_bury 1 // epochRoundLength: uint64

	// contracts/stakingPool.algo.ts:528
	// curRound = globals.round
	global Round
	frame_bury 2 // curRound: uint64

	// contracts/stakingPool.algo.ts:529
	// thisEpochBegin = curRound - (curRound % epochRoundLength)
	frame_dig 2 // curRound: uint64
	frame_dig 2 // curRound: uint64
	frame_dig 1 // epochRoundLength: uint64
	%
	-
	frame_bury 3 // thisEpochBegin: uint64

	// *if20_condition
	// contracts/stakingPool.algo.ts:532
	// this.lastPayout.exists
	txna Applications 0
	byte 0x6c6173745061796f7574 // "lastPayout"
	app_global_get_ex
	swap
	pop
	bz *if20_end

	// *if20_consequent
	// contracts/stakingPool.algo.ts:533
	// lastPayoutEpoch = this.lastPayout.value - (this.lastPayout.value % epochRoundLength)
	byte 0x6c6173745061796f7574 // "lastPayout"
	app_global_get
	byte 0x6c6173745061796f7574 // "lastPayout"
	app_global_get
	frame_dig 1 // epochRoundLength: uint64
	%
	-
	frame_bury 4 // lastPayoutEpoch: uint64

	// contracts/stakingPool.algo.ts:537
	// assert(lastPayoutEpoch !== thisEpochBegin, "can't call epochBalanceUpdate in same epoch as prior call")
	frame_dig 4 // lastPayoutEpoch: uint64
	frame_dig 3 // thisEpochBegin: uint64
	!=

	// can't call epochBalanceUpdate in same epoch as prior call
	assert

*if20_end:
	// contracts/stakingPool.algo.ts:540
	// this.checkIfBinClosed()
	callsub checkIfBinClosed

	// contracts/stakingPool.algo.ts:543
	// this.lastPayout.value = curRound
	byte 0x6c6173745061796f7574 // "lastPayout"
	frame_dig 2 // curRound: uint64
	app_global_put

	// contracts/stakingPool.algo.ts:544
	// this.epochNumber.value += 1
	byte 0x65706f63684e756d626572 // "epochNumber"
	app_global_get
	int 1
	+
	byte 0x65706f63684e756d626572 // "epochNumber"
	swap
	app_global_put

	// contracts/stakingPool.algo.ts:549
	// isTokenEligible = validatorConfig.rewardTokenId !== 0
	frame_dig 0 // validatorConfig: (uint64,address,address,uint64,uint8,address,uint64[4],uint64,uint64,uint64,uint32,uint32,address,uint64,uint64,uint8,uint64,uint64)
	extract 153 8
	btoi
	int 0
	!=
	frame_bury 5 // isTokenEligible: bool

	// contracts/stakingPool.algo.ts:550
	// poolOneAppID = this.app.id
	txna Applications 0
	frame_bury 6 // poolOneAppID: uint64

	// contracts/stakingPool.algo.ts:551
	// poolOneAddress = this.app.address
	global CurrentApplicationAddress
	frame_bury 7 // poolOneAddress: address

	// *if21_condition
	// contracts/stakingPool.algo.ts:556
	// isTokenEligible
	frame_dig 5 // isTokenEligible: bool
	bz *if21_end

	// *if21_consequent
	// *if22_condition
	// contracts/stakingPool.algo.ts:557
	// this.poolId.value !== 1
	byte 0x706f6f6c4964 // "poolId"
	app_global_get
	int 1
	!=
	bz *if22_end

	// *if22_consequent
	// contracts/stakingPool.algo.ts:559
	// poolOneAppID = sendMethodCall<typeof ValidatorRegistry.prototype.getPoolAppId>({
	//                     applicationID: this.creatingValidatorContractAppId.value,
	//                     methodArgs: [this.validatorId.value, 1],
	//                 })
	itxn_begin
	int appl
	itxn_field TypeEnum
	method "getPoolAppId(uint64,uint64)uint64"
	itxn_field ApplicationArgs

	// contracts/stakingPool.algo.ts:560
	// applicationID: this.creatingValidatorContractAppId.value
	byte 0x63726561746f72417070 // "creatorApp"
	app_global_get
	itxn_field ApplicationID

	// contracts/stakingPool.algo.ts:561
	// methodArgs: [this.validatorId.value, 1]
	byte 0x76616c696461746f724964 // "validatorId"
	app_global_get
	itob
	itxn_field ApplicationArgs
	byte 0x0000000000000001
	itxn_field ApplicationArgs

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	itxn NumLogs
	int 1
	-
	itxnas Logs
	extract 4 0
	btoi
	frame_bury 6 // poolOneAppID: uint64

	// contracts/stakingPool.algo.ts:563
	// poolOneAddress = AppID.fromUint64(poolOneAppID).address
	frame_dig 6 // poolOneAppID: uint64
	app_params_get AppAddress
	pop
	frame_bury 7 // poolOneAddress: address

*if22_end:
	// *if23_condition
	// contracts/stakingPool.algo.ts:568
	// this.poolId.value === 1
	byte 0x706f6f6c4964 // "poolId"
	app_global_get
	int 1
	==
	bz *if23_else

	// *if23_consequent
	// contracts/stakingPool.algo.ts:569
	// tokenPayoutRatio = sendMethodCall<typeof ValidatorRegistry.prototype.setTokenPayoutRatio>({
	//                     applicationID: this.creatingValidatorContractAppId.value,
	//                     methodArgs: [this.validatorId.value],
	//                 })
	itxn_begin
	int appl
	itxn_field TypeEnum
	method "setTokenPayoutRatio(uint64)(uint64[24],uint64)"
	itxn_field ApplicationArgs

	// contracts/stakingPool.algo.ts:570
	// applicationID: this.creatingValidatorContractAppId.value
	byte 0x63726561746f72417070 // "creatorApp"
	app_global_get
	itxn_field ApplicationID

	// contracts/stakingPool.algo.ts:571
	// methodArgs: [this.validatorId.value]
	byte 0x76616c696461746f724964 // "validatorId"
	app_global_get
	itob
	itxn_field ApplicationArgs

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	itxn NumLogs
	int 1
	-
	itxnas Logs
	extract 4 0
	frame_bury 8 // tokenPayoutRatio: PoolTokenPayoutRatio
	b *if23_end

*if23_else:
	// contracts/stakingPool.algo.ts:575
	// tokenPayoutRatio = sendMethodCall<typeof StakingPool.prototype.proxiedSetTokenPayoutRatio>({
	//                     applicationID: AppID.fromUint64(poolOneAppID),
	//                     methodArgs: [{ id: this.validatorId.value, poolId: this.poolId.value, poolAppId: this.app.id }],
	//                 })
	itxn_begin
	int appl
	itxn_field TypeEnum
	method "proxiedSetTokenPayoutRatio((uint64,uint64,uint64))(uint64[24],uint64)"
	itxn_field ApplicationArgs

	// contracts/stakingPool.algo.ts:576
	// applicationID: AppID.fromUint64(poolOneAppID)
	frame_dig 6 // poolOneAppID: uint64
	itxn_field ApplicationID

	// contracts/stakingPool.algo.ts:577
	// methodArgs: [{ id: this.validatorId.value, poolId: this.poolId.value, poolAppId: this.app.id }]
	byte 0x76616c696461746f724964 // "validatorId"
	app_global_get
	itob
	byte 0x706f6f6c4964 // "poolId"
	app_global_get
	itob
	concat
	txna Applications 0
	itob
	concat
	itxn_field ApplicationArgs

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	itxn NumLogs
	int 1
	-
	itxnas Logs
	extract 4 0
	frame_bury 8 // tokenPayoutRatio: PoolTokenPayoutRatio

*if23_end:

*if21_end:
	// contracts/stakingPool.algo.ts:584
	// validatorState = sendMethodCall<typeof ValidatorRegistry.prototype.getValidatorState>({
	//             applicationID: this.creatingValidatorContractAppId.value,
	//             methodArgs: [this.validatorId.value],
	//         })
	itxn_begin
	int appl
	itxn_field TypeEnum
	method "getValidatorState(uint64)(uint16,uint64,uint64,uint64)"
	itxn_field ApplicationArgs

	// contracts/stakingPool.algo.ts:585
	// applicationID: this.creatingValidatorContractAppId.value
	byte 0x63726561746f72417070 // "creatorApp"
	app_global_get
	itxn_field ApplicationID

	// contracts/stakingPool.algo.ts:586
	// methodArgs: [this.validatorId.value]
	byte 0x76616c696461746f724964 // "validatorId"
	app_global_get
	itob
	itxn_field ApplicationArgs

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	itxn NumLogs
	int 1
	-
	itxnas Logs
	extract 4 0
	frame_bury 9 // validatorState: (uint16,uint64,uint64,uint64)

	// contracts/stakingPool.algo.ts:588
	// rewardTokenHeldBack = validatorState.rewardTokenHeldBack
	frame_dig 9 // validatorState: (uint16,uint64,uint64,uint64)
	extract 18 8
	btoi
	frame_bury 10 // rewardTokenHeldBack: uint64

	// contracts/stakingPool.algo.ts:594
	// algoRewardAvail = this.app.address.balance - this.totalAlgoStaked.value - this.app.address.minBalance
	global CurrentApplicationAddress
	acct_params_get AcctBalance
	pop
	byte 0x7374616b6564 // "staked"
	app_global_get
	-
	global CurrentApplicationAddress
	acct_params_get AcctMinBalance
	pop
	-
	frame_bury 11 // algoRewardAvail: uint64

	// contracts/stakingPool.algo.ts:595
	// isPoolSaturated = false
	int 0
	frame_bury 12 // isPoolSaturated: bool

	// contracts/stakingPool.algo.ts:596
	// algoSaturationAmt = this.algoSaturationLevel()
	callsub algoSaturationLevel
	frame_bury 13 // algoSaturationAmt: uint64

	// *if24_condition
	// contracts/stakingPool.algo.ts:604
	// validatorState.totalAlgoStaked > algoSaturationAmt
	frame_dig 9 // validatorState: (uint16,uint64,uint64,uint64)
	extract 10 8
	btoi
	frame_dig 13 // algoSaturationAmt: uint64
	>
	bz *if24_end

	// *if24_consequent
	// contracts/stakingPool.algo.ts:605
	// isPoolSaturated = true
	int 1
	frame_bury 12 // isPoolSaturated: bool

*if24_end:
	// contracts/stakingPool.algo.ts:611
	// tokenRewardAvail = 0
	int 0
	frame_bury 14 // tokenRewardAvail: uint64

	// contracts/stakingPool.algo.ts:612
	// tokenRewardPaidOut = 0
	int 0
	frame_bury 15 // tokenRewardPaidOut: uint64

	// contracts/stakingPool.algo.ts:613
	// validatorCommissionPaidOut = 0
	int 0
	frame_bury 16 // validatorCommissionPaidOut: uint64

	// contracts/stakingPool.algo.ts:614
	// excessToFeeSink = 0
	int 0
	frame_bury 17 // excessToFeeSink: uint64

	// *if25_condition
	// contracts/stakingPool.algo.ts:615
	// isTokenEligible
	frame_dig 5 // isTokenEligible: bool
	bz *if25_end

	// *if25_consequent
	// contracts/stakingPool.algo.ts:616
	// tokenRewardBal =
	//                 poolOneAddress.assetBalance(AssetID.fromUint64(validatorConfig.rewardTokenId)) - rewardTokenHeldBack
	frame_dig 7 // poolOneAddress: address
	frame_dig 0 // validatorConfig: (uint64,address,address,uint64,uint8,address,uint64[4],uint64,uint64,uint64,uint32,uint32,address,uint64,uint64,uint8,uint64,uint64)
	extract 153 8
	btoi
	asset_holding_get AssetBalance
	pop
	frame_dig 10 // rewardTokenHeldBack: uint64
	-
	frame_bury 18 // tokenRewardBal: uint64

	// *if26_condition
	// contracts/stakingPool.algo.ts:621
	// tokenRewardBal >= validatorConfig.rewardPerPayout
	frame_dig 18 // tokenRewardBal: uint64
	frame_dig 0 // validatorConfig: (uint64,address,address,uint64,uint8,address,uint64[4],uint64,uint64,uint64,uint32,uint32,address,uint64,uint64,uint8,uint64,uint64)
	extract 161 8
	btoi
	>=
	bz *if26_end

	// *if26_consequent
	// contracts/stakingPool.algo.ts:627
	// ourPoolPctOfWhole = tokenPayoutRatio.poolPctOfWhole[this.poolId.value - 1]
	frame_dig 8 // tokenPayoutRatio: PoolTokenPayoutRatio
	int 0
	byte 0x706f6f6c4964 // "poolId"
	app_global_get
	int 1
	-
	int 8
	* // acc * typeLength
	+
	int 8
	extract3
	btoi
	frame_bury 19 // ourPoolPctOfWhole: uint64

	// contracts/stakingPool.algo.ts:630
	// tokenRewardAvail = wideRatio([validatorConfig.rewardPerPayout, ourPoolPctOfWhole], [1_000_000])
	frame_dig 0 // validatorConfig: (uint64,address,address,uint64,uint8,address,uint64[4],uint64,uint64,uint64,uint32,uint32,address,uint64,uint64,uint8,uint64,uint64)
	extract 161 8
	btoi
	frame_dig 19 // ourPoolPctOfWhole: uint64
	mulw
	int 0
	int 1_000_000
	divmodw
	pop
	pop
	swap
	!

	// wideRatio failed
	assert
	frame_bury 14 // tokenRewardAvail: uint64

*if26_end:

*if25_end:
	// *if27_condition
	// contracts/stakingPool.algo.ts:633
	// tokenRewardAvail === 0
	frame_dig 14 // tokenRewardAvail: uint64
	int 0
	==
	bz *if27_end

	// *if27_consequent
	// *if28_condition
	// contracts/stakingPool.algo.ts:638
	// algoRewardAvail < 1_000_000
	frame_dig 11 // algoRewardAvail: uint64
	int 1_000_000
	<
	bz *if28_end

	// *if28_consequent
	// contracts/stakingPool.algo.ts:639
	// log('!token&&!noalgo to pay')
	byte 0x21746f6b656e2626216e6f616c676f20746f20706179 // "!token&&!noalgo to pay"
	log

	// contracts/stakingPool.algo.ts:640
	// return
	retsub

*if28_end:

*if27_end:
	// *if29_condition
	// contracts/stakingPool.algo.ts:644
	// isPoolSaturated
	frame_dig 12 // isPoolSaturated: bool
	bz *if29_elseif1_condition

	// *if29_consequent
	// contracts/stakingPool.algo.ts:647
	// diminishedReward = wideRatio([algoRewardAvail, algoSaturationAmt], [validatorState.totalAlgoStaked])
	frame_dig 11 // algoRewardAvail: uint64
	frame_dig 13 // algoSaturationAmt: uint64
	mulw
	int 0
	frame_dig 9 // validatorState: (uint16,uint64,uint64,uint64)
	extract 10 8
	btoi
	divmodw
	pop
	pop
	swap
	!

	// wideRatio failed
	assert
	frame_bury 20 // diminishedReward: uint64

	// contracts/stakingPool.algo.ts:649
	// excessToFeeSink = algoRewardAvail - diminishedReward
	frame_dig 11 // algoRewardAvail: uint64
	frame_dig 20 // diminishedReward: uint64
	-
	frame_bury 17 // excessToFeeSink: uint64

	// contracts/stakingPool.algo.ts:650
	// sendPayment({
	//                 amount: excessToFeeSink,
	//                 receiver: this.getFeeSink(),
	//                 note: 'pool saturated, excess to fee sink',
	//             })
	itxn_begin
	int pay
	itxn_field TypeEnum

	// contracts/stakingPool.algo.ts:651
	// amount: excessToFeeSink
	frame_dig 17 // excessToFeeSink: uint64
	itxn_field Amount

	// contracts/stakingPool.algo.ts:652
	// receiver: this.getFeeSink()
	callsub getFeeSink
	itxn_field Receiver

	// contracts/stakingPool.algo.ts:653
	// note: 'pool saturated, excess to fee sink'
	byte 0x706f6f6c207361747572617465642c2065786365737320746f206665652073696e6b // "pool saturated, excess to fee sink"
	itxn_field Note

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contracts/stakingPool.algo.ts:656
	// algoRewardAvail = diminishedReward
	frame_dig 20 // diminishedReward: uint64
	frame_bury 11 // algoRewardAvail: uint64
	b *if29_end

*if29_elseif1_condition:
	// contracts/stakingPool.algo.ts:657
	// validatorConfig.percentToValidator !== 0
	frame_dig 0 // validatorConfig: (uint64,address,address,uint64,uint8,address,uint64[4],uint64,uint64,uint64,uint32,uint32,address,uint64,uint64,uint8,uint64,uint64)
	extract 173 4
	btoi
	int 0
	!=
	bz *if29_end

	// *if29_elseif1_consequent
	// contracts/stakingPool.algo.ts:660
	// validatorCommissionPaidOut = wideRatio(
	//                 [algoRewardAvail, validatorConfig.percentToValidator as uint64],
	//                 [1_000_000],
	//             )
	frame_dig 11 // algoRewardAvail: uint64
	frame_dig 0 // validatorConfig: (uint64,address,address,uint64,uint8,address,uint64[4],uint64,uint64,uint64,uint32,uint32,address,uint64,uint64,uint8,uint64,uint64)
	extract 173 4
	btoi
	mulw
	int 0
	int 1_000_000
	divmodw
	pop
	pop
	swap
	!

	// wideRatio failed
	assert
	frame_bury 16 // validatorCommissionPaidOut: uint64

	// contracts/stakingPool.algo.ts:666
	// algoRewardAvail -= validatorCommissionPaidOut
	frame_dig 11 // algoRewardAvail: uint64
	frame_dig 16 // validatorCommissionPaidOut: uint64
	-
	frame_bury 11 // algoRewardAvail: uint64

	// *if30_condition
	// contracts/stakingPool.algo.ts:673
	// validatorCommissionPaidOut > 0
	frame_dig 16 // validatorCommissionPaidOut: uint64
	int 0
	>
	bz *if30_end

	// *if30_consequent
	// contracts/stakingPool.algo.ts:676
	// managerTopOff = 0
	int 0
	frame_bury 21 // managerTopOff: uint64

	// *if31_condition
	// contracts/stakingPool.algo.ts:678
	// validatorConfig.manager !== validatorConfig.validatorCommissionAddress &&
	//                     validatorConfig.manager.balance - validatorConfig.manager.minBalance < 2_100_000
	frame_dig 0 // validatorConfig: (uint64,address,address,uint64,uint8,address,uint64[4],uint64,uint64,uint64,uint32,uint32,address,uint64,uint64,uint8,uint64,uint64)
	extract 40 32
	frame_dig 0 // validatorConfig: (uint64,address,address,uint64,uint8,address,uint64[4],uint64,uint64,uint64,uint32,uint32,address,uint64,uint64,uint8,uint64,uint64)
	extract 177 32
	!=
	dup
	bz *skip_and3
	frame_dig 0 // validatorConfig: (uint64,address,address,uint64,uint8,address,uint64[4],uint64,uint64,uint64,uint32,uint32,address,uint64,uint64,uint8,uint64,uint64)
	extract 40 32
	acct_params_get AcctBalance
	pop
	frame_dig 0 // validatorConfig: (uint64,address,address,uint64,uint8,address,uint64[4],uint64,uint64,uint64,uint32,uint32,address,uint64,uint64,uint8,uint64,uint64)
	extract 40 32
	acct_params_get AcctMinBalance
	pop
	-
	int 2_100_000
	<
	&&

*skip_and3:
	bz *if31_end

	// *if31_consequent
	// contracts/stakingPool.algo.ts:681
	// managerTopOff = validatorCommissionPaidOut < 2_100_000 ? validatorCommissionPaidOut : 2_100_000
	frame_dig 16 // validatorCommissionPaidOut: uint64
	int 2_100_000
	<
	bz *ternary1_false
	frame_dig 16 // validatorCommissionPaidOut: uint64
	b *ternary1_end

*ternary1_false:
	int 2_100_000

*ternary1_end:
	frame_bury 21 // managerTopOff: uint64

	// contracts/stakingPool.algo.ts:682
	// sendPayment({
	//                         amount: managerTopOff,
	//                         receiver: validatorConfig.manager,
	//                         note: 'validator reward to manager for funding epoch updates',
	//                     })
	itxn_begin
	int pay
	itxn_field TypeEnum

	// contracts/stakingPool.algo.ts:683
	// amount: managerTopOff
	frame_dig 21 // managerTopOff: uint64
	itxn_field Amount

	// contracts/stakingPool.algo.ts:684
	// receiver: validatorConfig.manager
	frame_dig 0 // validatorConfig: (uint64,address,address,uint64,uint8,address,uint64[4],uint64,uint64,uint64,uint32,uint32,address,uint64,uint64,uint8,uint64,uint64)
	extract 40 32
	itxn_field Receiver

	// contracts/stakingPool.algo.ts:685
	// note: 'validator reward to manager for funding epoch updates'
	byte 0x76616c696461746f722072657761726420746f206d616e6167657220666f722066756e64696e672065706f63682075706461746573 // "validator reward to manager for funding epoch updates"
	itxn_field Note

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

*if31_end:
	// *if32_condition
	// contracts/stakingPool.algo.ts:688
	// validatorCommissionPaidOut - managerTopOff > 0
	frame_dig 16 // validatorCommissionPaidOut: uint64
	frame_dig 21 // managerTopOff: uint64
	-
	int 0
	>
	bz *if32_end

	// *if32_consequent
	// contracts/stakingPool.algo.ts:689
	// sendPayment({
	//                         amount: validatorCommissionPaidOut - managerTopOff,
	//                         receiver: validatorConfig.validatorCommissionAddress,
	//                         note: 'validator reward',
	//                     })
	itxn_begin
	int pay
	itxn_field TypeEnum

	// contracts/stakingPool.algo.ts:690
	// amount: validatorCommissionPaidOut - managerTopOff
	frame_dig 16 // validatorCommissionPaidOut: uint64
	frame_dig 21 // managerTopOff: uint64
	-
	itxn_field Amount

	// contracts/stakingPool.algo.ts:691
	// receiver: validatorConfig.validatorCommissionAddress
	frame_dig 0 // validatorConfig: (uint64,address,address,uint64,uint8,address,uint64[4],uint64,uint64,uint64,uint32,uint32,address,uint64,uint64,uint8,uint64,uint64)
	extract 177 32
	itxn_field Receiver

	// contracts/stakingPool.algo.ts:692
	// note: 'validator reward'
	byte 0x76616c696461746f7220726577617264 // "validator reward"
	itxn_field Note

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

*if32_end:

*if30_end:

*if29_end:
	// contracts/stakingPool.algo.ts:704
	// increasedStake = 0
	int 0
	frame_bury 22 // increasedStake: uint64

	// *if33_condition
	// contracts/stakingPool.algo.ts:728
	// algoRewardAvail !== 0 || tokenRewardAvail !== 0
	frame_dig 11 // algoRewardAvail: uint64
	int 0
	!=
	dup
	bnz *skip_or1
	frame_dig 14 // tokenRewardAvail: uint64
	int 0
	!=
	||

*skip_or1:
	bz *if33_end

	// *if33_consequent
	// contracts/stakingPool.algo.ts:729
	// partialStakersTotalStake: uint64 = 0
	int 0
	frame_bury 23 // partialStakersTotalStake: uint64

	// contracts/stakingPool.algo.ts:730
	// origAlgoReward = algoRewardAvail
	frame_dig 11 // algoRewardAvail: uint64
	frame_bury 24 // origAlgoReward: uint64

	// contracts/stakingPool.algo.ts:731
	// for (let i = 0; i < this.stakers.value.length; i += 1)
	int 0
	frame_bury 25 // i: uint64

*for_4:
	// contracts/stakingPool.algo.ts:731
	// i < this.stakers.value.length
	frame_dig 25 // i: uint64
	int 200
	<
	bz *for_4_end

	// *if34_condition
	// contracts/stakingPool.algo.ts:732
	// globals.opcodeBudget < 400
	global OpcodeBudget
	int 400
	<
	bz *if34_end

	// *if34_consequent
	// contracts/stakingPool.algo.ts:733
	// increaseOpcodeBudget()
	itxn_begin
	int appl
	itxn_field TypeEnum
	int 0
	itxn_field Fee
	byte b64 CoEB // #pragma version 10; int 1
	dup
	itxn_field ApprovalProgram
	itxn_field ClearStateProgram
	int DeleteApplication
	itxn_field OnCompletion
	itxn_submit

*if34_end:
	// contracts/stakingPool.algo.ts:735
	// cmpStaker = clone(this.stakers.value[i])
	frame_dig 25 // i: uint64
	int 64
	* // acc * typeLength
	int 64
	byte 0x7374616b657273 // "stakers"
	cover 2
	box_extract
	frame_bury 26 // cmpStaker: (address,uint64,uint64,uint64,uint64)

	// *if35_condition
	// contracts/stakingPool.algo.ts:736
	// cmpStaker.account !== globals.zeroAddress
	frame_dig 26 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	extract 0 32
	global ZeroAddress
	!=
	bz *if35_end

	// *if35_consequent
	// *if36_condition
	// contracts/stakingPool.algo.ts:737
	// cmpStaker.entryRound >= thisEpochBegin
	frame_dig 26 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	extract 56 8
	btoi
	frame_dig 3 // thisEpochBegin: uint64
	>=
	bz *if36_else

	// *if36_consequent
	// contracts/stakingPool.algo.ts:740
	// partialStakersTotalStake += cmpStaker.balance
	frame_dig 23 // partialStakersTotalStake: uint64
	frame_dig 26 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	extract 32 8
	btoi
	+
	frame_bury 23 // partialStakersTotalStake: uint64
	b *if36_end

*if36_else:
	// contracts/stakingPool.algo.ts:744
	// timeInPool = thisEpochBegin - cmpStaker.entryRound
	frame_dig 3 // thisEpochBegin: uint64
	frame_dig 26 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	extract 56 8
	btoi
	-
	frame_bury 27 // timeInPool: uint64

	// *if37_condition
	// contracts/stakingPool.algo.ts:748
	// timeInPool < epochRoundLength
	frame_dig 27 // timeInPool: uint64
	frame_dig 1 // epochRoundLength: uint64
	<
	bz *if37_end

	// *if37_consequent
	// contracts/stakingPool.algo.ts:749
	// partialStakersTotalStake += cmpStaker.balance
	frame_dig 23 // partialStakersTotalStake: uint64
	frame_dig 26 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	extract 32 8
	btoi
	+
	frame_bury 23 // partialStakersTotalStake: uint64

	// contracts/stakingPool.algo.ts:750
	// timePercentage = (timeInPool * 1000) / epochRoundLength
	frame_dig 27 // timeInPool: uint64
	int 1000
	*
	frame_dig 1 // epochRoundLength: uint64
	/
	frame_bury 28 // timePercentage: uint64

	// *if38_condition
	// contracts/stakingPool.algo.ts:752
	// tokenRewardAvail > 0
	frame_dig 14 // tokenRewardAvail: uint64
	int 0
	>
	bz *if38_end

	// *if38_consequent
	// contracts/stakingPool.algo.ts:754
	// stakerTokenReward = wideRatio(
	//                                     [cmpStaker.balance, tokenRewardAvail, timePercentage],
	//                                     [this.totalAlgoStaked.value, 1000],
	//                                 )
	frame_dig 26 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	extract 32 8
	btoi
	frame_dig 14 // tokenRewardAvail: uint64
	mulw
	frame_dig 28 // timePercentage: uint64
	uncover 2
	dig 1
	*
	cover 2
	mulw
	cover 2
	+
	swap
	byte 0x7374616b6564 // "staked"
	app_global_get
	int 1000
	mulw
	divmodw
	pop
	pop
	swap
	!

	// wideRatio failed
	assert
	frame_bury 29 // stakerTokenReward: uint64

	// contracts/stakingPool.algo.ts:761
	// tokenRewardAvail -= stakerTokenReward
	frame_dig 14 // tokenRewardAvail: uint64
	frame_dig 29 // stakerTokenReward: uint64
	-
	frame_bury 14 // tokenRewardAvail: uint64

	// contracts/stakingPool.algo.ts:762
	// cmpStaker.rewardTokenBalance += stakerTokenReward
	frame_dig 26 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	int 48 // headOffset
	frame_dig 26 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	extract 48 8
	btoi
	frame_dig 29 // stakerTokenReward: uint64
	+
	itob
	replace3
	frame_bury 26 // cmpStaker: (address,uint64,uint64,uint64,uint64)

	// contracts/stakingPool.algo.ts:763
	// tokenRewardPaidOut += stakerTokenReward
	frame_dig 15 // tokenRewardPaidOut: uint64
	frame_dig 29 // stakerTokenReward: uint64
	+
	frame_bury 15 // tokenRewardPaidOut: uint64

*if38_end:
	// contracts/stakingPool.algo.ts:766
	// stakerReward = wideRatio(
	//                                 [cmpStaker.balance, origAlgoReward, timePercentage],
	//                                 [this.totalAlgoStaked.value, 1000],
	//                             )
	frame_dig 26 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	extract 32 8
	btoi
	frame_dig 24 // origAlgoReward: uint64
	mulw
	frame_dig 28 // timePercentage: uint64
	uncover 2
	dig 1
	*
	cover 2
	mulw
	cover 2
	+
	swap
	byte 0x7374616b6564 // "staked"
	app_global_get
	int 1000
	mulw
	divmodw
	pop
	pop
	swap
	!

	// wideRatio failed
	assert
	frame_bury 30 // stakerReward: uint64

	// contracts/stakingPool.algo.ts:772
	// algoRewardAvail -= stakerReward
	frame_dig 11 // algoRewardAvail: uint64
	frame_dig 30 // stakerReward: uint64
	-
	frame_bury 11 // algoRewardAvail: uint64

	// contracts/stakingPool.algo.ts:775
	// cmpStaker.balance += stakerReward
	frame_dig 26 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	int 32 // headOffset
	frame_dig 26 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	extract 32 8
	btoi
	frame_dig 30 // stakerReward: uint64
	+
	itob
	replace3
	frame_bury 26 // cmpStaker: (address,uint64,uint64,uint64,uint64)

	// contracts/stakingPool.algo.ts:776
	// cmpStaker.totalRewarded += stakerReward
	frame_dig 26 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	int 40 // headOffset
	frame_dig 26 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	extract 40 8
	btoi
	frame_dig 30 // stakerReward: uint64
	+
	itob
	replace3
	frame_bury 26 // cmpStaker: (address,uint64,uint64,uint64,uint64)

	// contracts/stakingPool.algo.ts:777
	// increasedStake += stakerReward
	frame_dig 22 // increasedStake: uint64
	frame_dig 30 // stakerReward: uint64
	+
	frame_bury 22 // increasedStake: uint64

	// contracts/stakingPool.algo.ts:779
	// this.stakers.value[i] = cmpStaker
	frame_dig 25 // i: uint64
	int 64
	* // acc * typeLength
	frame_dig 26 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	byte 0x7374616b657273 // "stakers"
	cover 2
	box_replace

*if37_end:

*if36_end:

*if35_end:

*for_4_continue:
	// contracts/stakingPool.algo.ts:731
	// i += 1
	frame_dig 25 // i: uint64
	int 1
	+
	frame_bury 25 // i: uint64
	b *for_4

*for_4_end:
	// contracts/stakingPool.algo.ts:787
	// newPoolTotalStake = this.totalAlgoStaked.value - partialStakersTotalStake
	byte 0x7374616b6564 // "staked"
	app_global_get
	frame_dig 23 // partialStakersTotalStake: uint64
	-
	frame_bury 31 // newPoolTotalStake: uint64

	// *if39_condition
	// contracts/stakingPool.algo.ts:791
	// newPoolTotalStake > 0
	frame_dig 31 // newPoolTotalStake: uint64
	int 0
	>
	bz *if39_end

	// *if39_consequent
	// contracts/stakingPool.algo.ts:793
	// for (let i = 0; i < this.stakers.value.length; i += 1)
	int 0
	frame_bury 32 // i: uint64

*for_5:
	// contracts/stakingPool.algo.ts:793
	// i < this.stakers.value.length
	frame_dig 32 // i: uint64
	int 200
	<
	bz *for_5_end

	// *if40_condition
	// contracts/stakingPool.algo.ts:794
	// globals.opcodeBudget < 200
	global OpcodeBudget
	int 200
	<
	bz *if40_end

	// *if40_consequent
	// contracts/stakingPool.algo.ts:795
	// increaseOpcodeBudget()
	itxn_begin
	int appl
	itxn_field TypeEnum
	int 0
	itxn_field Fee
	byte b64 CoEB // #pragma version 10; int 1
	dup
	itxn_field ApprovalProgram
	itxn_field ClearStateProgram
	int DeleteApplication
	itxn_field OnCompletion
	itxn_submit

*if40_end:
	// contracts/stakingPool.algo.ts:797
	// cmpStaker = clone(this.stakers.value[i])
	frame_dig 32 // i: uint64
	int 64
	* // acc * typeLength
	int 64
	byte 0x7374616b657273 // "stakers"
	cover 2
	box_extract
	frame_bury 33 // cmpStaker: (address,uint64,uint64,uint64,uint64)

	// *if41_condition
	// contracts/stakingPool.algo.ts:798
	// cmpStaker.account !== globals.zeroAddress && cmpStaker.entryRound < thisEpochBegin
	frame_dig 33 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	extract 0 32
	global ZeroAddress
	!=
	dup
	bz *skip_and4
	frame_dig 33 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	extract 56 8
	btoi
	frame_dig 3 // thisEpochBegin: uint64
	<
	&&

*skip_and4:
	bz *if41_end

	// *if41_consequent
	// contracts/stakingPool.algo.ts:799
	// timeInPool = thisEpochBegin - cmpStaker.entryRound
	frame_dig 3 // thisEpochBegin: uint64
	frame_dig 33 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	extract 56 8
	btoi
	-
	frame_bury 34 // timeInPool: uint64

	// *if42_condition
	// contracts/stakingPool.algo.ts:801
	// timeInPool >= epochRoundLength
	frame_dig 34 // timeInPool: uint64
	frame_dig 1 // epochRoundLength: uint64
	>=
	bz *if42_end

	// *if42_consequent
	// *if43_condition
	// contracts/stakingPool.algo.ts:806
	// tokenRewardAvail > 0
	frame_dig 14 // tokenRewardAvail: uint64
	int 0
	>
	bz *if43_end

	// *if43_consequent
	// contracts/stakingPool.algo.ts:807
	// stakerTokenReward = wideRatio(
	//                                     [cmpStaker.balance, tokenRewardAvail],
	//                                     [newPoolTotalStake],
	//                                 )
	frame_dig 33 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	extract 32 8
	btoi
	frame_dig 14 // tokenRewardAvail: uint64
	mulw
	int 0
	frame_dig 31 // newPoolTotalStake: uint64
	divmodw
	pop
	pop
	swap
	!

	// wideRatio failed
	assert
	frame_bury 35 // stakerTokenReward: uint64

	// contracts/stakingPool.algo.ts:813
	// cmpStaker.rewardTokenBalance += stakerTokenReward
	frame_dig 33 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	int 48 // headOffset
	frame_dig 33 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	extract 48 8
	btoi
	frame_dig 35 // stakerTokenReward: uint64
	+
	itob
	replace3
	frame_bury 33 // cmpStaker: (address,uint64,uint64,uint64,uint64)

	// contracts/stakingPool.algo.ts:814
	// tokenRewardPaidOut += stakerTokenReward
	frame_dig 15 // tokenRewardPaidOut: uint64
	frame_dig 35 // stakerTokenReward: uint64
	+
	frame_bury 15 // tokenRewardPaidOut: uint64

*if43_end:
	// *if44_condition
	// contracts/stakingPool.algo.ts:816
	// algoRewardAvail > 0
	frame_dig 11 // algoRewardAvail: uint64
	int 0
	>
	bz *if44_end

	// *if44_consequent
	// contracts/stakingPool.algo.ts:817
	// stakerReward = wideRatio(
	//                                     [cmpStaker.balance, algoRewardAvail],
	//                                     [newPoolTotalStake],
	//                                 )
	frame_dig 33 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	extract 32 8
	btoi
	frame_dig 11 // algoRewardAvail: uint64
	mulw
	int 0
	frame_dig 31 // newPoolTotalStake: uint64
	divmodw
	pop
	pop
	swap
	!

	// wideRatio failed
	assert
	frame_bury 36 // stakerReward: uint64

	// contracts/stakingPool.algo.ts:823
	// cmpStaker.balance += stakerReward
	frame_dig 33 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	int 32 // headOffset
	frame_dig 33 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	extract 32 8
	btoi
	frame_dig 36 // stakerReward: uint64
	+
	itob
	replace3
	frame_bury 33 // cmpStaker: (address,uint64,uint64,uint64,uint64)

	// contracts/stakingPool.algo.ts:824
	// cmpStaker.totalRewarded += stakerReward
	frame_dig 33 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	int 40 // headOffset
	frame_dig 33 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	extract 40 8
	btoi
	frame_dig 36 // stakerReward: uint64
	+
	itob
	replace3
	frame_bury 33 // cmpStaker: (address,uint64,uint64,uint64,uint64)

	// contracts/stakingPool.algo.ts:825
	// increasedStake += stakerReward
	frame_dig 22 // increasedStake: uint64
	frame_dig 36 // stakerReward: uint64
	+
	frame_bury 22 // increasedStake: uint64

*if44_end:
	// contracts/stakingPool.algo.ts:829
	// this.stakers.value[i] = cmpStaker
	frame_dig 32 // i: uint64
	int 64
	* // acc * typeLength
	frame_dig 33 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	byte 0x7374616b657273 // "stakers"
	cover 2
	box_replace

*if42_end:

*if41_end:

*for_5_continue:
	// contracts/stakingPool.algo.ts:793
	// i += 1
	frame_dig 32 // i: uint64
	int 1
	+
	frame_bury 32 // i: uint64
	b *for_5

*for_5_end:

*if39_end:

*if33_end:
	// contracts/stakingPool.algo.ts:839
	// roundsLeftInBin = this.binRoundStart.value + this.roundsPerDay.value - globals.round
	byte 0x62696e526f756e645374617274 // "binRoundStart"
	app_global_get
	byte 0x726f756e6473506572446179 // "roundsPerDay"
	app_global_get
	+
	global Round
	-
	frame_bury 37 // roundsLeftInBin: uint64

	// contracts/stakingPool.algo.ts:840
	// this.totalAlgoStaked.value += increasedStake
	byte 0x7374616b6564 // "staked"
	app_global_get
	frame_dig 22 // increasedStake: uint64
	+
	byte 0x7374616b6564 // "staked"
	swap
	app_global_put

	// contracts/stakingPool.algo.ts:841
	// this.stakeAccumulator.value =
	//             this.stakeAccumulator.value + (increasedStake as uint128) * (roundsLeftInBin as uint128)
	byte 0x7374616b65416363756d756c61746f72 // "stakeAccumulator"
	dup
	app_global_get
	frame_dig 22 // increasedStake: uint64
	itob
	frame_dig 37 // roundsLeftInBin: uint64
	itob
	b*
	b+
	dup
	bitlen
	int 128
	<=

	// this.stakeAccumulator.value + (increasedStake as uint128) * (roundsLeftInBin as uint128) overflowed 128 bits
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 16
	-
	swap
	substring3
	app_global_put

	// contracts/stakingPool.algo.ts:843
	// this.rewardAccumulator.value = this.rewardAccumulator.value + increasedStake
	byte 0x726577617264416363756d756c61746f72 // "rewardAccumulator"
	dup
	app_global_get
	frame_dig 22 // increasedStake: uint64
	+
	app_global_put

	// contracts/stakingPool.algo.ts:849
	// sendMethodCall<typeof ValidatorRegistry.prototype.stakeUpdatedViaRewards>({
	//             applicationID: this.creatingValidatorContractAppId.value,
	//             methodArgs: [
	//                 { id: this.validatorId.value, poolId: this.poolId.value, poolAppId: this.app.id },
	//                 increasedStake,
	//                 tokenRewardPaidOut,
	//                 validatorCommissionPaidOut,
	//                 excessToFeeSink,
	//             ],
	//         })
	itxn_begin
	int appl
	itxn_field TypeEnum
	method "stakeUpdatedViaRewards((uint64,uint64,uint64),uint64,uint64,uint64,uint64)void"
	itxn_field ApplicationArgs

	// contracts/stakingPool.algo.ts:850
	// applicationID: this.creatingValidatorContractAppId.value
	byte 0x63726561746f72417070 // "creatorApp"
	app_global_get
	itxn_field ApplicationID

	// contracts/stakingPool.algo.ts:851
	// methodArgs: [
	//                 { id: this.validatorId.value, poolId: this.poolId.value, poolAppId: this.app.id },
	//                 increasedStake,
	//                 tokenRewardPaidOut,
	//                 validatorCommissionPaidOut,
	//                 excessToFeeSink,
	//             ]
	byte 0x76616c696461746f724964 // "validatorId"
	app_global_get
	itob
	byte 0x706f6f6c4964 // "poolId"
	app_global_get
	itob
	concat
	txna Applications 0
	itob
	concat
	itxn_field ApplicationArgs
	frame_dig 22 // increasedStake: uint64
	itob
	itxn_field ApplicationArgs
	frame_dig 15 // tokenRewardPaidOut: uint64
	itob
	itxn_field ApplicationArgs
	frame_dig 16 // validatorCommissionPaidOut: uint64
	itob
	itxn_field ApplicationArgs
	frame_dig 17 // excessToFeeSink: uint64
	itob
	itxn_field ApplicationArgs

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

// goOnline(pay,byte[],byte[],byte[],uint64,uint64,uint64)void
*abi_route_goOnline:
	// voteKeyDilution: uint64
	txna ApplicationArgs 6
	btoi

	// voteLast: uint64
	txna ApplicationArgs 5
	btoi

	// voteFirst: uint64
	txna ApplicationArgs 4
	btoi

	// stateProofPK: byte[]
	txna ApplicationArgs 3
	extract 2 0

	// selectionPK: byte[]
	txna ApplicationArgs 2
	extract 2 0

	// votePK: byte[]
	txna ApplicationArgs 1
	extract 2 0

	// feePayment: pay
	txn GroupIndex
	int 1
	-
	dup
	gtxns TypeEnum
	int pay
	==

	// argument 6 (feePayment) for goOnline must be a pay transaction
	assert

	// execute goOnline(pay,byte[],byte[],byte[],uint64,uint64,uint64)void
	callsub goOnline
	int 1
	return

// goOnline(feePayment: PayTxn, votePK: bytes, selectionPK: bytes, stateProofPK: bytes, voteFirst: uint64, voteLast: uint64, voteKeyDilution: uint64): void
//
// Registers a staking pool key online against a participation key.
// [ ONLY OWNER OR MANAGER CAN CALL ]
//
// @param {PayTxn} feePayment - payment to cover extra fee of going online if offline - or 0 if not renewal
// @param {bytes} votePK - The vote public key.
// @param {bytes} selectionPK - The selection public key.
// @param {bytes} stateProofPK - The state proof public key.
// @param {uint64} voteFirst - The first vote index.
// @param {uint64} voteLast - The last vote index.
// @param {uint64} voteKeyDilution - The vote key dilution value.
// @throws {Error} Will throw an error if the caller is not the owner or a manager.
goOnline:
	proto 7 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x

	// contracts/stakingPool.algo.ts:883
	// assert(this.isOwnerOrManagerCaller(), 'can only be called by owner or manager of validator')
	callsub isOwnerOrManagerCaller

	// can only be called by owner or manager of validator
	assert

	// contracts/stakingPool.algo.ts:884
	// extraFee = this.getGoOnlineFee()
	callsub getGoOnlineFee
	frame_bury 0 // extraFee: uint64

	// contracts/stakingPool.algo.ts:885
	// verifyPayTxn(feePayment, { receiver: this.app.address, amount: extraFee })
	// verify receiver
	frame_dig -1 // feePayment: PayTxn
	gtxns Receiver
	global CurrentApplicationAddress
	==

	// transaction verification failed: {"txn":"feePayment","field":"receiver","expected":"this.app.address"}
	assert

	// verify amount
	frame_dig -1 // feePayment: PayTxn
	gtxns Amount
	frame_dig 0 // extraFee: uint64
	==

	// transaction verification failed: {"txn":"feePayment","field":"amount","expected":"extraFee"}
	assert

	// contracts/stakingPool.algo.ts:886
	// sendOnlineKeyRegistration({
	//             votePK: votePK,
	//             selectionPK: selectionPK,
	//             stateProofPK: stateProofPK,
	//             voteFirst: voteFirst,
	//             voteLast: voteLast,
	//             voteKeyDilution: voteKeyDilution,
	//             fee: this.getGoOnlineFee(),
	//         })
	itxn_begin
	int keyreg
	itxn_field TypeEnum

	// contracts/stakingPool.algo.ts:887
	// votePK: votePK
	frame_dig -2 // votePK: bytes
	itxn_field VotePK

	// contracts/stakingPool.algo.ts:888
	// selectionPK: selectionPK
	frame_dig -3 // selectionPK: bytes
	itxn_field SelectionPK

	// contracts/stakingPool.algo.ts:889
	// stateProofPK: stateProofPK
	frame_dig -4 // stateProofPK: bytes
	itxn_field StateProofPK

	// contracts/stakingPool.algo.ts:890
	// voteFirst: voteFirst
	frame_dig -5 // voteFirst: uint64
	itxn_field VoteFirst

	// contracts/stakingPool.algo.ts:891
	// voteLast: voteLast
	frame_dig -6 // voteLast: uint64
	itxn_field VoteLast

	// contracts/stakingPool.algo.ts:892
	// voteKeyDilution: voteKeyDilution
	frame_dig -7 // voteKeyDilution: uint64
	itxn_field VoteKeyDilution

	// contracts/stakingPool.algo.ts:893
	// fee: this.getGoOnlineFee()
	callsub getGoOnlineFee
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

// goOffline()void
*abi_route_goOffline:
	// execute goOffline()void
	callsub goOffline
	int 1
	return

// goOffline(): void
//
// Marks a staking pool key OFFLINE.
// [ ONLY OWNER OR MANAGER CAN CALL ]
goOffline:
	proto 0 0

	// *if45_condition
	// contracts/stakingPool.algo.ts:905
	// this.txn.sender !== this.creatingValidatorContractAppId.value.address
	txn Sender
	byte 0x63726561746f72417070 // "creatorApp"
	app_global_get
	app_params_get AppAddress
	pop
	!=
	bz *if45_end

	// *if45_consequent
	// contracts/stakingPool.algo.ts:906
	// assert(this.isOwnerOrManagerCaller(), 'can only be called by owner or manager of validator')
	callsub isOwnerOrManagerCaller

	// can only be called by owner or manager of validator
	assert

*if45_end:
	// contracts/stakingPool.algo.ts:909
	// sendOfflineKeyRegistration({})
	itxn_begin
	int keyreg
	itxn_field TypeEnum

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

// linkToNFD(uint64,string)void
*abi_route_linkToNFD:
	// nfdName: string
	txna ApplicationArgs 2
	extract 2 0

	// nfdAppId: uint64
	txna ApplicationArgs 1
	btoi

	// execute linkToNFD(uint64,string)void
	callsub linkToNFD
	int 1
	return

// linkToNFD(nfdAppId: uint64, nfdName: string): void
linkToNFD:
	proto 2 0

	// contracts/stakingPool.algo.ts:916
	// assert(this.isOwnerOrManagerCaller(), 'can only be called by owner or manager of validator')
	callsub isOwnerOrManagerCaller

	// can only be called by owner or manager of validator
	assert

	// contracts/stakingPool.algo.ts:918
	// sendAppCall({
	//             applicationID: AppID.fromUint64(this.nfdRegistryAppId),
	//             applicationArgs: ['verify_nfd_addr', nfdName, itob(nfdAppId), rawBytes(this.app.address)],
	//             applications: [AppID.fromUint64(nfdAppId)],
	//         })
	itxn_begin
	int appl
	itxn_field TypeEnum

	// contracts/stakingPool.algo.ts:919
	// applicationID: AppID.fromUint64(this.nfdRegistryAppId)
	pushint TMPL_nfdRegistryAppId
	itxn_field ApplicationID

	// contracts/stakingPool.algo.ts:920
	// applicationArgs: ['verify_nfd_addr', nfdName, itob(nfdAppId), rawBytes(this.app.address)]
	byte 0x7665726966795f6e66645f61646472 // "verify_nfd_addr"
	itxn_field ApplicationArgs
	frame_dig -2 // nfdName: string
	itxn_field ApplicationArgs
	frame_dig -1 // nfdAppId: uint64
	itob
	itxn_field ApplicationArgs
	global CurrentApplicationAddress
	itxn_field ApplicationArgs

	// contracts/stakingPool.algo.ts:921
	// applications: [AppID.fromUint64(nfdAppId)]
	frame_dig -1 // nfdAppId: uint64
	itxn_field Applications

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

// proxiedSetTokenPayoutRatio((uint64,uint64,uint64))(uint64[24],uint64)
*abi_route_proxiedSetTokenPayoutRatio:
	// The ABI return prefix
	byte 0x151f7c75

	// poolKey: (uint64,uint64,uint64)
	txna ApplicationArgs 1
	dup
	len
	int 24
	==

	// argument 0 (poolKey) for proxiedSetTokenPayoutRatio must be a (uint64,uint64,uint64)
	assert

	// execute proxiedSetTokenPayoutRatio((uint64,uint64,uint64))(uint64[24],uint64)
	callsub proxiedSetTokenPayoutRatio
	concat
	log
	int 1
	return

// proxiedSetTokenPayoutRatio(poolKey: ValidatorPoolKey): PoolTokenPayoutRatio
//
// proxiedSetTokenPayoutRatio is meant to be called by pools != 1 - calling US, pool #1
// We need to verify that we are in fact being called by another of OUR pools (not us)
// and then we'll call the validator on their behalf to update the token payouts
// @param poolKey - ValidatorPoolKey tuple
proxiedSetTokenPayoutRatio:
	proto 1 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x

	// contracts/stakingPool.algo.ts:932
	// assert(this.validatorId.value === poolKey.id, 'caller must be part of same validator set!')
	byte 0x76616c696461746f724964 // "validatorId"
	app_global_get
	frame_dig -1 // poolKey: ValidatorPoolKey
	extract 0 8
	btoi
	==

	// caller must be part of same validator set!
	assert

	// contracts/stakingPool.algo.ts:933
	// assert(this.poolId.value === 1, 'callee must be pool 1')
	byte 0x706f6f6c4964 // "poolId"
	app_global_get
	int 1
	==

	// callee must be pool 1
	assert

	// contracts/stakingPool.algo.ts:934
	// assert(poolKey.poolId !== 1, 'caller must NOT be pool 1')
	frame_dig -1 // poolKey: ValidatorPoolKey
	extract 8 8
	btoi
	int 1
	!=

	// caller must NOT be pool 1
	assert

	// contracts/stakingPool.algo.ts:936
	// callerPoolAppID = sendMethodCall<typeof ValidatorRegistry.prototype.getPoolAppId>({
	//             applicationID: this.creatingValidatorContractAppId.value,
	//             methodArgs: [poolKey.id, poolKey.poolId],
	//         })
	itxn_begin
	int appl
	itxn_field TypeEnum
	method "getPoolAppId(uint64,uint64)uint64"
	itxn_field ApplicationArgs

	// contracts/stakingPool.algo.ts:937
	// applicationID: this.creatingValidatorContractAppId.value
	byte 0x63726561746f72417070 // "creatorApp"
	app_global_get
	itxn_field ApplicationID

	// contracts/stakingPool.algo.ts:938
	// methodArgs: [poolKey.id, poolKey.poolId]
	frame_dig -1 // poolKey: ValidatorPoolKey
	extract 0 8
	btoi
	itob
	itxn_field ApplicationArgs
	frame_dig -1 // poolKey: ValidatorPoolKey
	extract 8 8
	btoi
	itob
	itxn_field ApplicationArgs

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	itxn NumLogs
	int 1
	-
	itxnas Logs
	extract 4 0
	btoi
	frame_bury 0 // callerPoolAppID: uint64

	// contracts/stakingPool.algo.ts:940
	// assert(callerPoolAppID === poolKey.poolAppId)
	frame_dig 0 // callerPoolAppID: uint64
	frame_dig -1 // poolKey: ValidatorPoolKey
	extract 16 8
	btoi
	==
	assert

	// contracts/stakingPool.algo.ts:941
	// assert(this.txn.sender === AppID.fromUint64(poolKey.poolAppId).address)
	txn Sender
	frame_dig -1 // poolKey: ValidatorPoolKey
	extract 16 8
	btoi
	app_params_get AppAddress
	pop
	==
	assert

	// contracts/stakingPool.algo.ts:943
	// return sendMethodCall<typeof ValidatorRegistry.prototype.setTokenPayoutRatio>({
	//             applicationID: this.creatingValidatorContractAppId.value,
	//             methodArgs: [this.validatorId.value],
	//         })
	itxn_begin
	int appl
	itxn_field TypeEnum
	method "setTokenPayoutRatio(uint64)(uint64[24],uint64)"
	itxn_field ApplicationArgs

	// contracts/stakingPool.algo.ts:944
	// applicationID: this.creatingValidatorContractAppId.value
	byte 0x63726561746f72417070 // "creatorApp"
	app_global_get
	itxn_field ApplicationID

	// contracts/stakingPool.algo.ts:945
	// methodArgs: [this.validatorId.value]
	byte 0x76616c696461746f724964 // "validatorId"
	app_global_get
	itob
	itxn_field ApplicationArgs

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	itxn NumLogs
	int 1
	-
	itxnas Logs
	extract 4 0

	// set the subroutine return value
	frame_bury 0
	retsub

// isOwnerOrManagerCaller(): boolean
isOwnerOrManagerCaller:
	proto 0 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x

	// contracts/stakingPool.algo.ts:950
	// OwnerAndManager = sendMethodCall<typeof ValidatorRegistry.prototype.getValidatorOwnerAndManager>({
	//             applicationID: this.creatingValidatorContractAppId.value,
	//             methodArgs: [this.validatorId.value],
	//         })
	itxn_begin
	int appl
	itxn_field TypeEnum
	method "getValidatorOwnerAndManager(uint64)(address,address)"
	itxn_field ApplicationArgs

	// contracts/stakingPool.algo.ts:951
	// applicationID: this.creatingValidatorContractAppId.value
	byte 0x63726561746f72417070 // "creatorApp"
	app_global_get
	itxn_field ApplicationID

	// contracts/stakingPool.algo.ts:952
	// methodArgs: [this.validatorId.value]
	byte 0x76616c696461746f724964 // "validatorId"
	app_global_get
	itob
	itxn_field ApplicationArgs

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	itxn NumLogs
	int 1
	-
	itxnas Logs
	extract 4 0
	frame_bury 0 // OwnerAndManager: (address,address)

	// contracts/stakingPool.algo.ts:954
	// return this.txn.sender === OwnerAndManager[0] || this.txn.sender === OwnerAndManager[1]
	txn Sender
	frame_dig 0 // OwnerAndManager: (address,address)
	extract 0 32
	==
	dup
	bnz *skip_or2
	txn Sender
	frame_dig 0 // OwnerAndManager: (address,address)
	extract 32 32
	==
	||

*skip_or2:
	// set the subroutine return value
	frame_bury 0
	retsub

// getFeeSink(): Address
getFeeSink:
	proto 0 1

	// contracts/stakingPool.algo.ts:958
	// return this.feeSinkAddr
	pushbytes TMPL_feeSinkAddr
	retsub

// algoSaturationLevel(): uint64
//
// Returns the maximum allowed stake per validator based on a percentage of all current online stake before
// the validator is considered saturated - where rewards are diminished.
algoSaturationLevel:
	proto 0 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x

	// contracts/stakingPool.algo.ts:968
	// online = this.getCurrentOnlineStake()
	callsub getCurrentOnlineStake
	frame_bury 0 // online: uint64

	// contracts/stakingPool.algo.ts:970
	// return wideRatio([online, MAX_VALIDATOR_SOFT_PCT_OF_ONLINE_1DECIMAL], [1000])
	frame_dig 0 // online: uint64
	int 100
	mulw
	int 0
	int 1000
	divmodw
	pop
	pop
	swap
	!

	// wideRatio failed
	assert

	// set the subroutine return value
	frame_bury 0
	retsub

// getGoOnlineFee(): uint64
getGoOnlineFee:
	proto 0 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x

	// contracts/stakingPool.algo.ts:977
	// isOnline = false
	int 0
	frame_bury 0 // isOnline: bool

	// *if46_condition
	// contracts/stakingPool.algo.ts:978
	// !isOnline
	frame_dig 0 // isOnline: bool
	!
	bz *if46_end

	// *if46_consequent
	// contracts/stakingPool.algo.ts:981
	// return 2_000_000
	int 2_000_000
	b *getGoOnlineFee*return

*if46_end:
	// contracts/stakingPool.algo.ts:983
	// return 0
	int 0

*getGoOnlineFee*return:
	// set the subroutine return value
	frame_bury 0
	retsub

// getCurrentOnlineStake(): uint64
getCurrentOnlineStake:
	proto 0 1

	// contracts/stakingPool.algo.ts:989
	// return 2_000_000_000_000_000
	int 2_000_000_000_000_000
	retsub

// checkIfBinClosed(): void
//
// Checks if the current round is in a 'new calculation bin' (approximately daily)
checkIfBinClosed:
	proto 0 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x
	dupn 4

	// contracts/stakingPool.algo.ts:996
	// currentBinSize = this.roundsPerDay.value as uint128
	byte 0x726f756e6473506572446179 // "roundsPerDay"
	app_global_get
	itob
	frame_bury 0 // currentBinSize: unsafe uint128

	// *if47_condition
	// contracts/stakingPool.algo.ts:997
	// globals.round >= this.binRoundStart.value + (currentBinSize as uint64)
	global Round
	byte 0x62696e526f756e645374617274 // "binRoundStart"
	app_global_get
	frame_dig 0 // currentBinSize: unsafe uint128
	dup
	bitlen
	int 64
	<=

	// currentBinSize as uint64 overflowed 64 bits
	assert
	byte 0xFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 8
	-
	swap
	substring3
	btoi
	+
	>=
	bz *if47_end

	// *if47_consequent
	// *if48_condition
	// contracts/stakingPool.algo.ts:998
	// globals.opcodeBudget < 300
	global OpcodeBudget
	int 300
	<
	bz *if48_end

	// *if48_consequent
	// contracts/stakingPool.algo.ts:999
	// increaseOpcodeBudget()
	itxn_begin
	int appl
	itxn_field TypeEnum
	int 0
	itxn_field Fee
	byte b64 CoEB // #pragma version 10; int 1
	dup
	itxn_field ApprovalProgram
	itxn_field ClearStateProgram
	int DeleteApplication
	itxn_field OnCompletion
	itxn_submit

*if48_end:
	// contracts/stakingPool.algo.ts:1001
	// approxRoundsPerYear: uint128 = currentBinSize * (365 as uint128)
	frame_dig 0 // currentBinSize: unsafe uint128
	byte 0x0000000000000000000000000000016d
	b*
	dup
	bitlen
	int 128
	<=

	// currentBinSize * (365 as uint128) overflowed 128 bits
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 16
	-
	swap
	substring3
	frame_bury 1 // approxRoundsPerYear: uint128

	// contracts/stakingPool.algo.ts:1002
	// avgStake: uint128 = this.stakeAccumulator.value / currentBinSize
	byte 0x7374616b65416363756d756c61746f72 // "stakeAccumulator"
	app_global_get
	frame_dig 0 // currentBinSize: unsafe uint128
	b/
	dup
	bitlen
	int 128
	<=

	// this.stakeAccumulator.value / currentBinSize overflowed 128 bits
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 16
	-
	swap
	substring3
	frame_bury 2 // avgStake: uint128

	// *if49_condition
	// contracts/stakingPool.algo.ts:1003
	// avgStake !== 0
	frame_dig 2 // avgStake: uint128
	byte 0x00000000000000000000000000000000
	b!=
	bz *if49_end

	// *if49_consequent
	// contracts/stakingPool.algo.ts:1007
	// apr: uint128 =
	//                     (((this.rewardAccumulator.value as uint128) * (10000 as uint128)) / avgStake) *
	//                     (approxRoundsPerYear / currentBinSize)
	byte 0x726577617264416363756d756c61746f72 // "rewardAccumulator"
	app_global_get
	itob
	byte 0x00000000000000000000000000002710
	b*
	frame_dig 2 // avgStake: uint128
	b/
	frame_dig 1 // approxRoundsPerYear: uint128
	frame_dig 0 // currentBinSize: unsafe uint128
	b/
	b*
	dup
	bitlen
	int 128
	<=

	// (((this.rewardAccumulator.value as uint128) * (10000 as uint128)) / avgStake) *\n                    (approxRoundsPerYear / currentBinSize) overflowed 128 bits
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 16
	-
	swap
	substring3
	frame_bury 3 // apr: uint128

	// contracts/stakingPool.algo.ts:1011
	// alpha: uint128 = 10 as uint128
	byte 0x0000000000000000000000000000000a
	frame_bury 4 // alpha: unsafe uint128

	// *if50_condition
	// contracts/stakingPool.algo.ts:1013
	// avgStake > 300000000000
	frame_dig 2 // avgStake: uint128
	byte 0x000000000000000000000045d964b800
	b>
	bz *if50_end

	// *if50_consequent
	// contracts/stakingPool.algo.ts:1014
	// alpha = 90 as uint128
	byte 0x0000000000000000000000000000005a
	frame_bury 4 // alpha: unsafe uint128

*if50_end:
	// contracts/stakingPool.algo.ts:1016
	// this.weightedMovingAverage.value =
	//                     (this.weightedMovingAverage.value * ((100 as uint128) - alpha)) / (100 as uint128) +
	//                     (apr * alpha) / (100 as uint128)
	byte 0x65776d61 // "ewma"
	dup
	app_global_get
	byte 0x00000000000000000000000000000064
	frame_dig 4 // alpha: unsafe uint128
	b-
	b*
	byte 0x00000000000000000000000000000064
	b/
	frame_dig 3 // apr: uint128
	frame_dig 4 // alpha: unsafe uint128
	b*
	byte 0x00000000000000000000000000000064
	b/
	b+
	dup
	bitlen
	int 128
	<=

	// (this.weightedMovingAverage.value * ((100 as uint128) - alpha)) / (100 as uint128) +\n                    (apr * alpha) / (100 as uint128) overflowed 128 bits
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 16
	-
	swap
	substring3
	app_global_put

*if49_end:
	// contracts/stakingPool.algo.ts:1022
	// this.setRoundsPerDay()
	callsub setRoundsPerDay

	// contracts/stakingPool.algo.ts:1023
	// this.stakeAccumulator.value = (this.totalAlgoStaked.value as uint128) * (this.roundsPerDay.value as uint128)
	byte 0x7374616b65416363756d756c61746f72 // "stakeAccumulator"
	byte 0x7374616b6564 // "staked"
	app_global_get
	itob
	byte 0x726f756e6473506572446179 // "roundsPerDay"
	app_global_get
	itob
	b*
	dup
	bitlen
	int 128
	<=

	// (this.totalAlgoStaked.value as uint128) * (this.roundsPerDay.value as uint128) overflowed 128 bits
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 16
	-
	swap
	substring3
	app_global_put

	// contracts/stakingPool.algo.ts:1024
	// this.rewardAccumulator.value = 0
	byte 0x726577617264416363756d756c61746f72 // "rewardAccumulator"
	int 0
	app_global_put

	// contracts/stakingPool.algo.ts:1025
	// this.binRoundStart.value = globals.round - (globals.round % this.roundsPerDay.value)
	byte 0x62696e526f756e645374617274 // "binRoundStart"
	global Round
	global Round
	byte 0x726f756e6473506572446179 // "roundsPerDay"
	app_global_get
	%
	-
	app_global_put

*if47_end:
	retsub

// setRoundsPerDay(): void
setRoundsPerDay:
	proto 0 0

	// contracts/stakingPool.algo.ts:1030
	// this.roundsPerDay.value = AVG_ROUNDS_PER_DAY
	byte 0x726f756e6473506572446179 // "roundsPerDay"
	int 30857
	app_global_put
	retsub

*create_NoOp:
	method "createApplication(uint64,uint64,uint64,uint64)void"
	txna ApplicationArgs 0
	match *abi_route_createApplication

	// this contract does not implement the given ABI method for create NoOp
	err

*call_NoOp:
	method "gas()void"
	method "initStorage(pay)void"
	method "addStake(pay,address)uint64"
	method "removeStake(address,uint64)void"
	method "claimTokens()void"
	method "getStakerInfo(address)(address,uint64,uint64,uint64,uint64)"
	method "payTokenReward(address,uint64,uint64)void"
	method "updateAlgodVer(string)void"
	method "epochBalanceUpdate()void"
	method "goOnline(pay,byte[],byte[],byte[],uint64,uint64,uint64)void"
	method "goOffline()void"
	method "linkToNFD(uint64,string)void"
	method "proxiedSetTokenPayoutRatio((uint64,uint64,uint64))(uint64[24],uint64)"
	txna ApplicationArgs 0
	match *abi_route_gas *abi_route_initStorage *abi_route_addStake *abi_route_removeStake *abi_route_claimTokens *abi_route_getStakerInfo *abi_route_payTokenReward *abi_route_updateAlgodVer *abi_route_epochBalanceUpdate *abi_route_goOnline *abi_route_goOffline *abi_route_linkToNFD *abi_route_proxiedSetTokenPayoutRatio

	// this contract does not implement the given ABI method for call NoOp
	err

*call_UpdateApplication:
	method "updateApplication()void"
	txna ApplicationArgs 0
	match *abi_route_updateApplication

	// this contract does not implement the given ABI method for call UpdateApplication
	err